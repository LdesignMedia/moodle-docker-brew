#!/bin/bash -i
# Author: Luuk Verhoeven
# Date: 01.05.2023, 06:20
# Description:
# Simple starter for Moodle docker containers.
# Uses https://github.com/moodlehq/moodle-docker
# Tested on MacOS with https://orbstack.dev/download
#
#
#                               `.:;+o***ooi;.`
#                                `,;o*%%&##########&*:`
#                              '+&%%%***%%%%&$$$$$$$##&i`
#                            `+$$%********%&$$$$$$$$$$$#&,
#                           ,&&%*********&$$$$$$$$$$$$$$$$:
#                          ,#$%********&$$$$$$$$$$$$$$$$$$o:
#                         .$$$$&*****%%$$$########$$$$$$$$*i:
#                         %$$##$&%**%$%.'..,::;i+*$$$$$$$$*i+.
#                        '$#&o;,&$&&$$$+;ooi;:;i*%&$$$$$$$*iii
#                        .$+::,;$$$$$$$$#$*%;`',,+#$$$$$$$oiii`
#                        .oo&%&$$$$$$$$$$%*%,'.$&:.$$$$$$$+iii`
#                        .#*+:`+$$$$$$$$$@%.,,+@@@i&$$$$$&iiii'
#                        ,*.*,`+#$$$$$$$$#@#&$@@@##$$$$$$%iii;
#                        ,,*%;+##$$$$$$$$$$$$$$$$$$$$$$$$oiioo,
#                        .$&@@##$$$$##$$$$$$$$$$$$$$$$$$$i+%*o%;
#                        .$$&&&$%$$&**$$$$$$$$$$$$$$$$$$%i+i;;;+.
#                        .$$$$$$oiii;o$$$$$$$$$$$$$$$$$$oii;i;ii,
#                        .$$$$$$$%%%$#$$$$$$$$$$$$$$$$$&iii;ii;+,
#                        '$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*iiiii;ii`
#                        '$$$$$$$$$$$$$$&&&&$$$$$$$$$$&iii;;ii:'
#                         &$$$$$&&&&&$&&&$$$$$$$$$$$$#*i++ii,`
#                         o#$$$$&&$$&&$$$$$$$$$$$$$$#%+;'..`
#                         .#$$$$$$%o+%$$$$$$$$$$$$$$%+i`
#                          ;#$$$$$$$$$$$$$$$$$$$$$$*ii`
#                           :$#$$$$$$$$$$$$$$$$$&*+;i;
#                            'o#$$$$$$$$$$$$$&%oi;;;i;....'
#                              ,&#$$$$$$$$%o+i;;;iii+;...,::
#                               `;%###$%oi;;;iiiiiiii;,:;;ii`
#                                `.;ii;;;;;;i;i;;;;;;iiiiiii`
#                              `.....',+ii+*%*iiiiiiiiiiiii;
#                             ;**%%,..;$*i%$$$%;iiiiiiiiiii;
#                             ;#$$$+..i##%&$$&$*;iiiiiiiiii;
#                             `&$&$*.';%**$$$$$$o;iiiiiiiiii'
#                              +$&$&,,ioi%$$$$$$$o;iiiiiiiii: `
#                              o$&$$+oooo$$$$$$$$$+;iiiiii;;:.''
#                             '%$&$$*+o+*$$$$$$$$$$o;;;:;;:,.'.,,'
#                           `,i*&$$$%+o+&$$$$$$&&%%*oo++;:,''.:;;;;,.
#                         `'::*%o%$$&++o$$$$&%******%%o+:::io*ooo**%%o;.`
#                       ';*i:;%*%**&$o+&$&%****%%%%%oi::;+*%%%%%%%%**%%%*+:
#                     ,+%%%;:i%*%%****o%*****%%%%%*i::;+*%%******%%%%***%%%+`
#                   :*%%***;:;*%%*%%*******%%*%%*i;,;+*%%*%%%%%%%%%%%%%%***%i
#                 `o%%****%;::*%*%%o*%%%%*o+o**i;:;i*%%*%%%%%%%%%%%%%%%%%%**%.
#                 +%**%%%%%i::o%%oio%**%%%%*i:;,;;*%%**%%%%%%%%%%%%%%%%%%%*%*;'
#

# Examples:
# moodle-docker help
# moodle-docker start 45
# moodle-docker start 42
# moodle-docker start 41
# moodle-docker start 311
# moodle-docker start 39
# moodle-docker update 41
# moodle-docker stop 41
# moodle-docker destroy 41
# moodle-docker behat 41 addtional

# TODO Flip arguments and support MWP eg moodle-docker 44mwp start | moodle-docker 44lms start

# VARS.
ORIGINAL_DIR=$(pwd)
SCRIPT_DIR_MOODLE_DOCKER="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# TODO compare against brew list --versions moodle-docker start upgrade if its higher than current
PLUGIN_VERSION="1.0.36"

MOODLE_LIST=$(cat $SCRIPT_DIR_MOODLE_DOCKER/moodle_VERSIONS.txt)
VERSIONS=$(echo "$MOODLE_LIST" | awk -F'|' '{ print $1 }')
ARG2_SELECTED_VERSION=""
VERSION_FOUND=0
ARG1_ACTION="$1"
ARG2_SELECTED_VERSION="$2"

# Check for manual PHP version override
MANUAL_PHP_VERSION=""
for arg in "$@"; do
  if [[ "$arg" =~ ^--php=(.+)$ ]]; then
    MANUAL_PHP_VERSION="${BASH_REMATCH[1]}"
    # Remove the --php argument from ALL_REMAINING_ARGS
    ALL_REMAINING_ARGS="${ALL_REMAINING_ARGS//--php=$MANUAL_PHP_VERSION/}"
  fi
done

# ----------------------------------------------------------------

source "$SCRIPT_DIR_MOODLE_DOCKER/scripts/helper.sh"

# ----------------------------------------------------------------
# ARGUMENT VALIDATION - Check for common mistakes early
# ----------------------------------------------------------------

# List of valid commands
VALID_COMMANDS="start stop destroy init update behat phpunit grunt xdebug cron task upgrade help"

# Function to check if argument is a valid command
is_valid_command() {
  for cmd in $VALID_COMMANDS; do
    if [ "$1" == "$cmd" ]; then
      return 0
    fi
  done
  return 1
}

# Function to check if argument looks like a version
looks_like_version() {
  # Check if it matches version patterns: numbers, dev, or wp prefix
  if [[ "$1" =~ ^[0-9]+$ ]] || [ "$1" == "dev" ] || [[ "$1" =~ ^wp[0-9]+$ ]]; then
    return 0
  fi
  return 1
}

# Detect if arguments are swapped
if [ "$#" -ge 2 ]; then
  # Check if first arg looks like a version and second like a command
  if looks_like_version "$1" && is_valid_command "$2"; then
    log ""
    log "${RED}‚ùå Error: Arguments appear to be in wrong order!${RESET}"
    log ""
    log "  You entered: ${YELLOW}moodle-docker $1 $2${RESET}"
    log "  Correct format: ${GREEN}moodle-docker $2 $1${RESET}"
    log ""
    log "The correct syntax is: ${CYAN}moodle-docker <command> <version> [options]${RESET}"
    log ""
    log "Example: ${GREEN}moodle-docker start 45${RESET}"
    log ""
    exit 1
  fi

  # Check if first argument is neither a valid command nor looks like help/upgrade
  if [ "$1" != "help" ] && [ "$1" != "upgrade" ] && ! is_valid_command "$1"; then
    # Check if it might be a typo of a command
    SUGGESTIONS=""
    for cmd in $VALID_COMMANDS; do
      # Check for similar starting letters (at least 1 character match)
      if [ -n "$1" ] && [[ "$cmd" == "${1:0:1}"* ]]; then
        SUGGESTIONS="$SUGGESTIONS $cmd"
      fi
      # Also check if the command contains the typed string
      if [ -n "$1" ] && [[ "$cmd" == *"$1"* ]]; then
        if [[ "$SUGGESTIONS" != *"$cmd"* ]]; then
          SUGGESTIONS="$SUGGESTIONS $cmd"
        fi
      fi
    done

    log ""
    log "${RED}‚ùå Error: Invalid command '${1}'${RESET}"
    log ""
    log "Valid commands are: ${GREEN}$VALID_COMMANDS${RESET}"
    if [ -n "$SUGGESTIONS" ]; then
      log ""
      log "Did you mean: ${CYAN}$SUGGESTIONS${RESET}?"
    fi
    log ""
    log "Use ${CYAN}moodle-docker help${RESET} for usage information"
    log ""
    exit 1
  fi
fi

# ----------------------------------------------------------------

# Below is the alias (moodle-docker) to https://github.com/LdesignMedia/homebrew-moodle-docker/blob/main/install_moodle_docker.sh this is used for
# installing and workarround home directory issues.
# Header section
log ""
log "========================================================================"
log "${GREEN}Moodle Docker Brew v$PLUGIN_VERSION${RESET}"
log "by Ldesign Media - https://ldesignmedia.nl"
log "========================================================================"
log ""
log "üìÅ Working directory: $SCRIPT_DIR_MOODLE_DOCKER"
log "üìñ Documentation: https://github.com/LdesignMedia/moodle-docker-brew"
log ""

# Brew version check
BREW_VERSION=$(brew list --versions moodle-docker 2>/dev/null || echo "not installed via brew")
if [ "$BREW_VERSION" != "not installed via brew" ]; then
  log "üç∫ Homebrew version: $BREW_VERSION"
  log ""
fi

# Function to display help
show_help() {
  log "${CYAN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${RESET}"
  log "${CYAN}‚ïë${RESET}                    ${GREEN}MOODLE DOCKER BREW HELP${RESET}                         ${CYAN}‚ïë${RESET}"
  log "${CYAN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${RESET}"
  log ""
  log "${YELLOW}USAGE:${RESET}"
  log "  moodle-docker <command> <version> [options] [arguments]"
  log ""
  log "${YELLOW}COMMANDS:${RESET}"
  log "  ${GREEN}start${RESET}     - Start Moodle Docker environment"
  log "  ${GREEN}stop${RESET}      - Stop running containers (preserves data)"
  log "  ${GREEN}destroy${RESET}   - Remove containers and all data ‚ö†Ô∏è"
  log "  ${GREEN}init${RESET}      - Re-initialize test databases (Behat & PHPUnit)"
  log "  ${GREEN}update${RESET}    - Re-initialize test frameworks after plugin changes"
  log "  ${GREEN}behat${RESET}     - Run Behat acceptance tests"
  log "  ${GREEN}phpunit${RESET}   - Run PHPUnit tests"
  log "  ${GREEN}grunt${RESET}     - Run grunt watch for JS/CSS compilation"
  log "  ${GREEN}cron${RESET}      - Run Moodle cron (once or continuously)"
  log "  ${GREEN}task${RESET}      - Manage and run scheduled tasks"
  log "  ${GREEN}xdebug${RESET}    - Manage Xdebug for PHP debugging"
  log "  ${GREEN}upgrade${RESET}   - Update the tool and moodlehq/moodle-docker"
  log "  ${GREEN}help${RESET}      - Show this help message"
  log ""
  log "${YELLOW}AVAILABLE MOODLE VERSIONS:${RESET}"

  # Display versions in a formatted way
  log "  ${CYAN}Development:${RESET}"
  log "    ‚Ä¢ dev     - Latest development version (main branch)"
  log ""
  log "  ${CYAN}Stable Releases:${RESET}"
  log "    ‚Ä¢ 50      - Moodle 5.0 (requires PHP 8.2+)"
  log "    ‚Ä¢ 45      - Moodle 4.5 (LTS)"
  log "    ‚Ä¢ 44      - Moodle 4.4"
  log "    ‚Ä¢ 43      - Moodle 4.3"
  log "    ‚Ä¢ 42      - Moodle 4.2"
  log "    ‚Ä¢ 41      - Moodle 4.1"
  log "    ‚Ä¢ 40      - Moodle 4.0"
  log ""
  log "  ${CYAN}Legacy Versions:${RESET}"
  log "    ‚Ä¢ 311     - Moodle 3.11 (LTS)"
  log "    ‚Ä¢ 310     - Moodle 3.10"
  log "    ‚Ä¢ 39      - Moodle 3.9 (LTS)"
  log ""
  log "  ${CYAN}Moodle Workplace:${RESET} ${YELLOW}(requires GitLab access)${RESET}"
  log "    ‚Ä¢ wp50    - Workplace 5.0"
  log "    ‚Ä¢ wp45    - Workplace 4.5 (LTS)"
  log "    ‚Ä¢ wp44    - Workplace 4.4"
  log "    ‚Ä¢ wp43    - Workplace 4.3"
  log "    ‚Ä¢ wp42    - Workplace 4.2"
  log ""
  log "${YELLOW}OPTIONS:${RESET}"
  log "  --php=VERSION     Override PHP version (e.g., --php=8.3)"
  log "  --interactive,-i  Run Behat tests in interactive mode"
  log ""
  log "${YELLOW}PORT MAPPING:${RESET}"
  log "  Each version uses predictable ports:"
  log "  ‚Ä¢ Web:      80<version>  (e.g., 8042 for v4.2)"
  log "  ‚Ä¢ Database: 330<version> (e.g., 33042 for v4.2)"
  log "  ‚Ä¢ VNC:      590<version> (e.g., 59042 for v4.2)"
  log "  ‚Ä¢ Dev uses: 8099, 33099, 59099"
  log "  ‚Ä¢ Workplace: Uses 81xx, 331xx, 591xx (e.g., 8145 for wp45)"
  log ""
  log "${YELLOW}EXAMPLES:${RESET}"
  log "  ${CYAN}# Start Moodle 5.0${RESET}"
  log "  moodle-docker start 50"
  log ""
  log "  ${CYAN}# Start with specific PHP version${RESET}"
  log "  moodle-docker start 50 --php=8.3"
  log ""
  log "  ${CYAN}# Start Moodle Workplace 4.5${RESET}"
  log "  moodle-docker start wp45"
  log ""
  log "  ${CYAN}# Run Behat tests with tags${RESET}"
  log "  moodle-docker behat 44 --tags=@auth"
  log ""
  log "  ${CYAN}# Interactive Behat testing${RESET}"
  log "  moodle-docker behat 44 -i --tags=@mytest"
  log ""
  log "  ${CYAN}# Run PHPUnit tests${RESET}"
  log "  moodle-docker phpunit 45 auth/tests/"
  log ""
  log "  ${CYAN}# Re-initialize test databases${RESET}"
  log "  moodle-docker init 50"
  log ""
  log "  ${CYAN}# Install Xdebug${RESET}"
  log "  moodle-docker xdebug 50 install"
  log ""
  log "  ${CYAN}# Start grunt watch${RESET}"
  log "  moodle-docker grunt 42 watch"
  log ""
  log "  ${CYAN}# Run cron once${RESET}"
  log "  moodle-docker cron 45"
  log ""
  log "  ${CYAN}# Run cron continuously (development)${RESET}"
  log "  moodle-docker cron 45 watch"
  log ""
  log "  ${CYAN}# List all scheduled tasks${RESET}"
  log "  moodle-docker task 45 list"
  log ""
  log "  ${CYAN}# Run a task interactively${RESET}"
  log "  moodle-docker task 45 select"
  log ""
  log "  ${CYAN}# Run task #3 directly${RESET}"
  log "  moodle-docker task 45 select 3"
  log ""
  log "${YELLOW}DEFAULT CREDENTIALS:${RESET}"
  log "  Username: ${GREEN}admin${RESET}"
  log "  Password: ${GREEN}test${RESET}"
  log ""
  log "${YELLOW}MORE INFORMATION:${RESET}"
  log "  GitHub:  https://github.com/LdesignMedia/moodle-docker-brew"
  log "  Issues:  https://github.com/LdesignMedia/moodle-docker-brew/issues"
  log ""
}

# Show help if requested
if [ "$ARG1_ACTION" == "help" ] || [ "$#" -eq 0 ]; then
  show_help
  exit 0
fi

if [ "$ARG1_ACTION" == "upgrade" ]; then
  log ""
  log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
  log "${CYAN}‚¨ÜÔ∏è  Upgrading Moodle Docker Brew${RESET}"
  log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
  log ""

  cd "$SCRIPT_DIR_MOODLE_DOCKER" || abort "Directory $SCRIPT_DIR_MOODLE_DOCKER is missing"

  # Step 1: Update Homebrew package
  log "üì¶ ${YELLOW}Step 1/4: Checking Homebrew package updates...${RESET}"
  if command -v brew >/dev/null 2>&1; then
    brew update >/dev/null 2>&1
    if brew list moodle-docker >/dev/null 2>&1; then
      if brew outdated | grep -q "moodle-docker"; then
        log "  Updating moodle-docker package..."
        brew upgrade moodle-docker
        log "  ${GREEN}‚úì Package updated${RESET}"
      else
        log "  ${GREEN}‚úì Package is up to date${RESET}"
      fi
    else
      log "  ${YELLOW}‚ö† Package not installed via Homebrew${RESET}"
    fi
  else
    log "  ${YELLOW}‚ö† Homebrew not available${RESET}"
  fi

  # Step 2: Update main repository
  log ""
  log "üìÅ ${YELLOW}Step 2/4: Updating moodle-docker-brew repository...${RESET}"

  # Check for local changes
  if [[ -n $(git status --porcelain 2>/dev/null) ]]; then
    log "  ${YELLOW}‚ö† Local changes detected. Stashing...${RESET}"
    git stash push -m "Auto-stash before upgrade on $(date)" >/dev/null 2>&1
    STASHED=true
  fi

  # Clean up old submodules if they exist
  if [ -f .gitmodules ]; then
    log "  Removing legacy .gitmodules..."
    rm -f .gitmodules
  fi

  # Pull latest changes
  log "  Fetching latest changes..."
  git fetch origin >/dev/null 2>&1
  git reset --hard origin/main >/dev/null 2>&1
  git clean -fd >/dev/null 2>&1

  log "  ${GREEN}‚úì Repository updated to latest version${RESET}"

  if [ "$STASHED" = true ]; then
    log "  ${CYAN}‚ÑπÔ∏è  Your local changes were stashed. Run 'git stash pop' to restore them.${RESET}"
  fi

  # Step 3: Update or install moodlehq-docker
  log ""
  log "üê≥ ${YELLOW}Step 3/4: Updating moodlehq/moodle-docker...${RESET}"

  if [ ! -d "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" ]; then
    log "  Installing moodlehq-docker for the first time..."
    if git clone git@github.com:moodlehq/moodle-docker.git moodlehq-docker 2>/dev/null; then
      log "  ${GREEN}‚úì Successfully installed moodlehq-docker${RESET}"
    else
      log "  ${RED}‚úó Failed to clone moodlehq-docker${RESET}"
      log "  ${YELLOW}Trying HTTPS instead...${RESET}"
      if git clone https://github.com/moodlehq/moodle-docker.git moodlehq-docker 2>/dev/null; then
        log "  ${GREEN}‚úì Successfully installed via HTTPS${RESET}"
      else
        abort "Failed to clone moodlehq-docker. Check your internet connection."
      fi
    fi
  else
    cd "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" || abort "moodlehq-docker directory is missing"

    # Check for local changes in moodlehq-docker
    if [[ -n $(git status --porcelain 2>/dev/null) ]]; then
      log "  ${YELLOW}‚ö† Local modifications detected in moodlehq-docker${RESET}"
      log "  Backing up local changes..."

      # Create backup directory
      BACKUP_DIR="$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker-backup-$(date +%Y%m%d-%H%M%S)"
      cp -r "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" "$BACKUP_DIR"
      log "  ${GREEN}‚úì Backup created at: $BACKUP_DIR${RESET}"

      # Reset to clean state
      git reset --hard HEAD >/dev/null 2>&1
      git clean -fd >/dev/null 2>&1
    fi

    # Fetch and update
    log "  Fetching latest changes from moodlehq/moodle-docker..."
    git fetch origin >/dev/null 2>&1

    # Check if we're behind
    LOCAL=$(git rev-parse HEAD)
    REMOTE=$(git rev-parse origin/main)

    if [ "$LOCAL" = "$REMOTE" ]; then
      log "  ${GREEN}‚úì Already up to date${RESET}"
    else
      log "  Updating to latest version..."
      git reset --hard origin/main >/dev/null 2>&1
      git clean -fd >/dev/null 2>&1
      log "  ${GREEN}‚úì Updated successfully${RESET}"
    fi
  fi

  # Step 4: Verify installation
  log ""
  log "üîç ${YELLOW}Step 4/4: Verifying installation...${RESET}"

  cd "$SCRIPT_DIR_MOODLE_DOCKER" || exit

  # Check critical files
  MISSING_FILES=()
  [ ! -f "moodle-docker" ] && MISSING_FILES+=("moodle-docker")
  [ ! -f "moodlehq-docker/config.docker-template.php" ] && MISSING_FILES+=("config template")
  [ ! -f "moodle_versions.txt" ] && MISSING_FILES+=("version list")

  if [ ${#MISSING_FILES[@]} -eq 0 ]; then
    log "  ${GREEN}‚úì All critical files present${RESET}"
  else
    log "  ${RED}‚úó Missing files: ${MISSING_FILES[*]}${RESET}"
    abort "Installation incomplete. Please check the repository."
  fi

  # Get version info
  NEW_VERSION=$(grep "PLUGIN_VERSION=" moodle-docker | cut -d'"' -f2)
  log ""
  log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
  log "${GREEN}‚úÖ Upgrade completed successfully!${RESET}"
  log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
  log ""
  log "üìã ${CYAN}Summary:${RESET}"
  log "  ‚Ä¢ Version: ${GREEN}$NEW_VERSION${RESET}"
  log "  ‚Ä¢ Location: $SCRIPT_DIR_MOODLE_DOCKER"
  log ""
  log "üí° ${YELLOW}What's next:${RESET}"
  log "  ‚Ä¢ Run 'moodle-docker help' to see available commands"
  log "  ‚Ä¢ Start a Moodle instance with 'moodle-docker start <version>'"
  log ""

  # Back to the original directory
  cd "$ORIGINAL_DIR" || exit

  exit 0
fi

# Validate we can run the script.
setup

# Check if at least two argument is provided (except for help and upgrade)
if [ "$#" -lt 2 ] && [ "$ARG1_ACTION" != "help" ] && [ "$ARG1_ACTION" != "upgrade" ]; then
  log ""
  log "${RED}‚ùå Error: Missing required version argument${RESET}"
  log ""

  # Provide specific guidance based on the command
  case "$ARG1_ACTION" in
    start)
      log "Usage: ${CYAN}moodle-docker start <version>${RESET}"
      log "Example: ${GREEN}moodle-docker start 45${RESET}"
      ;;
    stop)
      log "Usage: ${CYAN}moodle-docker stop <version>${RESET}"
      log "Example: ${GREEN}moodle-docker stop 45${RESET}"
      ;;
    destroy)
      log "Usage: ${CYAN}moodle-docker destroy <version>${RESET}"
      log "Example: ${GREEN}moodle-docker destroy 45${RESET}"
      ;;
    behat)
      log "Usage: ${CYAN}moodle-docker behat <version> [options]${RESET}"
      log "Example: ${GREEN}moodle-docker behat 45 --tags=@auth${RESET}"
      ;;
    phpunit)
      log "Usage: ${CYAN}moodle-docker phpunit <version> [test_path]${RESET}"
      log "Example: ${GREEN}moodle-docker phpunit 45 auth/tests/${RESET}"
      ;;
    grunt)
      log "Usage: ${CYAN}moodle-docker grunt <version> [watch]${RESET}"
      log "Example: ${GREEN}moodle-docker grunt 45 watch${RESET}"
      ;;
    xdebug)
      log "Usage: ${CYAN}moodle-docker xdebug <version> [command]${RESET}"
      log "Example: ${GREEN}moodle-docker xdebug 45 install${RESET}"
      ;;
    cron)
      log "Usage: ${CYAN}moodle-docker cron <version> [mode]${RESET}"
      log "Example: ${GREEN}moodle-docker cron 45${RESET}"
      log "Example: ${GREEN}moodle-docker cron 45 watch${RESET}"
      ;;
    task)
      log "Usage: ${CYAN}moodle-docker task <version> [mode] [task_class]${RESET}"
      log "Example: ${GREEN}moodle-docker task 45 list${RESET}"
      log "Example: ${GREEN}moodle-docker task 45 select${RESET}"
      log "Example: ${GREEN}moodle-docker task 45 run \\\\core\\\\task\\\\session_cleanup_task${RESET}"
      ;;
    init)
      log "Usage: ${CYAN}moodle-docker init <version>${RESET}"
      log "Example: ${GREEN}moodle-docker init 45${RESET}"
      ;;
    update)
      log "Usage: ${CYAN}moodle-docker update <version>${RESET}"
      log "Example: ${GREEN}moodle-docker update 45${RESET}"
      ;;
    *)
      log "Usage: ${CYAN}moodle-docker <command> <version> [options]${RESET}"
      ;;
  esac

  log ""
  log "Available versions: ${GREEN}50, 45, 44, 43, 42, 41, 40, 311, 310, 39, dev${RESET}"
  log "Workplace versions: ${GREEN}wp50, wp45, wp44, wp43, wp42${RESET}"
  log ""
  log "Use ${CYAN}moodle-docker help${RESET} for full documentation"
  log ""
  exit 1
fi

# Check if the provided version is in the list
for version in $VERSIONS; do
  if [ "$version" == "$ARG2_SELECTED_VERSION" ]; then
    VERSION_FOUND=1
    break
  fi
done

if [ ! $VERSION_FOUND -eq 1 ]; then
  log ""
  log "${RED}‚ùå Error: Version '$ARG2_SELECTED_VERSION' is not available${RESET}"
  log ""

  # Check if it might be a typo or wrong format
  SUGGESTIONS=""

  # Check for common mistakes
  if [[ "$ARG2_SELECTED_VERSION" =~ ^4\.[0-9]$ ]]; then
    # User entered 4.5 instead of 45
    SUGGESTED_VERSION="${ARG2_SELECTED_VERSION//./}"
    for version in $VERSIONS; do
      if [ "$version" == "$SUGGESTED_VERSION" ]; then
        SUGGESTIONS="$SUGGESTED_VERSION"
        break
      fi
    done
    if [ -n "$SUGGESTIONS" ]; then
      log "${YELLOW}Did you mean: ${GREEN}$SUGGESTIONS${RESET}? (without the dot)"
    fi
  elif [[ "$ARG2_SELECTED_VERSION" =~ ^v[0-9]+$ ]]; then
    # User added 'v' prefix like v45
    SUGGESTED_VERSION="${ARG2_SELECTED_VERSION#v}"
    for version in $VERSIONS; do
      if [ "$version" == "$SUGGESTED_VERSION" ]; then
        SUGGESTIONS="$SUGGESTED_VERSION"
        break
      fi
    done
    if [ -n "$SUGGESTIONS" ]; then
      log "${YELLOW}Did you mean: ${GREEN}$SUGGESTIONS${RESET}? (without the 'v' prefix)"
    fi
  elif [[ "$ARG2_SELECTED_VERSION" == "workplace"* ]] || [[ "$ARG2_SELECTED_VERSION" == "mwp"* ]]; then
    # User typed workplace instead of wp
    log "${YELLOW}For Moodle Workplace, use format: ${GREEN}wp45, wp44, wp43${RESET}, etc."
  else
    # Show available versions close to what was entered
    for version in $VERSIONS; do
      if [[ "$version" == "${ARG2_SELECTED_VERSION:0:2}"* ]]; then
        SUGGESTIONS="$SUGGESTIONS $version"
      fi
    done
    if [ -n "$SUGGESTIONS" ]; then
      log "${YELLOW}Similar versions available:${GREEN}$SUGGESTIONS${RESET}"
    fi
  fi

  log ""
  log "${CYAN}Available versions:${RESET}"
  log "  ‚Ä¢ Stable: ${GREEN}50, 45, 44, 43, 42, 41, 40${RESET}"
  log "  ‚Ä¢ Legacy: ${GREEN}311, 310, 39${RESET}"
  log "  ‚Ä¢ Development: ${GREEN}dev${RESET}"
  log "  ‚Ä¢ Workplace: ${GREEN}wp50, wp45, wp44, wp43, wp42${RESET}"
  log ""
  log "Use ${CYAN}moodle-docker help${RESET} for more information"
  log ""
  exit 1
fi

# Get the corresponding download URL
download_url=$(echo "$MOODLE_LIST" | grep "^$ARG2_SELECTED_VERSION|" | awk -F'|' '{ print $2 }')

if [ -z "$download_url" ]; then
  abort "Invalid selection. Please try again."
fi

# Remove the first argument
shift
shift
ALL_REMAINING_ARGS="$@"

# Validate the first argument (this is a secondary check, primary check happens earlier)
case "$ARG1_ACTION" in
start | update | stop | destroy | info | behat | phpunit | grunt | xdebug | cron | task | init)
  # Valid command, continue
  ;;
*)
  log ""
  log "${RED}‚ùå Error: Invalid command '${ARG1_ACTION}'${RESET}"
  log ""
  log "Valid commands are:"
  log "  ‚Ä¢ ${GREEN}start${RESET}     - Start Moodle Docker environment"
  log "  ‚Ä¢ ${GREEN}stop${RESET}      - Stop running containers"
  log "  ‚Ä¢ ${GREEN}destroy${RESET}   - Remove containers and all data"
  log "  ‚Ä¢ ${GREEN}init${RESET}      - Re-initialize test databases"
  log "  ‚Ä¢ ${GREEN}update${RESET}    - Re-initialize test frameworks"
  log "  ‚Ä¢ ${GREEN}behat${RESET}     - Run Behat tests"
  log "  ‚Ä¢ ${GREEN}phpunit${RESET}   - Run PHPUnit tests"
  log "  ‚Ä¢ ${GREEN}grunt${RESET}     - Run grunt watch"
  log "  ‚Ä¢ ${GREEN}cron${RESET}      - Run Moodle cron"
  log "  ‚Ä¢ ${GREEN}task${RESET}      - Run scheduled tasks"
  log "  ‚Ä¢ ${GREEN}xdebug${RESET}    - Manage Xdebug"
  log ""
  log "Use ${CYAN}moodle-docker help${RESET} for detailed usage"
  log ""
  exit 1
  ;;
esac

# Configuration Section
log "------------------------------------------------------------------------"
log "${GREEN}üìã Configuration${RESET}"
log "------------------------------------------------------------------------"
log "  Moodle version: ${GREEN}$ARG2_SELECTED_VERSION${RESET}"
if [ -n "$ALL_REMAINING_ARGS" ]; then
  log "  Extra arguments: $ALL_REMAINING_ARGS"
fi

# EXPORTS ----------------------------------------------------------------
export COMPOSE_PROJECT_NAME="moodle${ARG2_SELECTED_VERSION}"
export MOODLE_DOCKER_DB=mariadb

# Handle special case for 'dev' version ports
if [ "$ARG2_SELECTED_VERSION" == "dev" ]; then
  export MOODLE_DOCKER_DB_PORT="33099"
  export MOODLE_DOCKER_SELENIUM_VNC_PORT="59099"
  export MOODLE_DOCKER_WEB_PORT="8099"
elif [[ "$ARG2_SELECTED_VERSION" == wp* ]]; then
  # Workplace versions use 81xx, 331xx, 591xx ports
  # Extract the numeric part from wp45 -> 45
  WP_VERSION_NUM="${ARG2_SELECTED_VERSION#wp}"
  export MOODLE_DOCKER_DB_PORT="331${WP_VERSION_NUM}"
  export MOODLE_DOCKER_SELENIUM_VNC_PORT="591${WP_VERSION_NUM}"
  export MOODLE_DOCKER_WEB_PORT="81${WP_VERSION_NUM}"
else
  export MOODLE_DOCKER_DB_PORT="330${ARG2_SELECTED_VERSION}"
  export MOODLE_DOCKER_SELENIUM_VNC_PORT="590${ARG2_SELECTED_VERSION}"
  export MOODLE_DOCKER_WEB_PORT="80${ARG2_SELECTED_VERSION}"
fi

export MOODLE_DOCKER_WWWROOT="${SCRIPT_DIR_MOODLE_DOCKER}/moodle/${ARG2_SELECTED_VERSION}"

# Determine PHP version based on Moodle version or manual override
if [ -n "$MANUAL_PHP_VERSION" ]; then
  # Use manually specified PHP version
  export MOODLE_DOCKER_PHP_VERSION="$MANUAL_PHP_VERSION"
  log "  PHP version: ${GREEN}${MANUAL_PHP_VERSION}${RESET} ${YELLOW}(manually set)${RESET}"
elif [ "$ARG2_SELECTED_VERSION" == "dev" ]; then
  # Development version uses latest PHP
  export MOODLE_DOCKER_PHP_VERSION=8.2
  log "  PHP version: ${GREEN}8.2${RESET} ${YELLOW}(development)${RESET}"
elif [ "$ARG2_SELECTED_VERSION" == "39" ]; then
  # Moodle 3.9 requires PHP 7.4
  export MOODLE_DOCKER_PHP_VERSION=7.4
  log "  PHP version: ${GREEN}7.4${RESET}"
elif [ "$ARG2_SELECTED_VERSION" == "310" ] || [ "$ARG2_SELECTED_VERSION" == "311" ]; then
  # Moodle 3.10-3.11 requires PHP 7.4 or 8.0
  export MOODLE_DOCKER_PHP_VERSION=8.0
  log "  PHP version: ${GREEN}8.0${RESET}"
elif [ "$ARG2_SELECTED_VERSION" == "40" ] || [ "$ARG2_SELECTED_VERSION" == "41" ] || [ "$ARG2_SELECTED_VERSION" == "42" ] || [ "$ARG2_SELECTED_VERSION" == "43" ]; then
  # Moodle 4.0-4.3 requires PHP 8.0 minimum
  export MOODLE_DOCKER_PHP_VERSION=8.0
  log "  PHP version: ${GREEN}8.0${RESET}"
elif [ "$ARG2_SELECTED_VERSION" == "44" ] || [ "$ARG2_SELECTED_VERSION" == "45" ]; then
  # Moodle 4.4-4.5 requires PHP 8.1 minimum
  export MOODLE_DOCKER_PHP_VERSION=8.1
  log "  PHP version: ${GREEN}8.1${RESET}"
elif [[ "$ARG2_SELECTED_VERSION" =~ ^[0-9]+$ ]] && [ "$ARG2_SELECTED_VERSION" -ge "50" ]; then
  # Moodle 5.0+ requires PHP 8.2 minimum
  export MOODLE_DOCKER_PHP_VERSION=8.2
  log "  PHP version: ${GREEN}8.2${RESET}"
elif [[ "$ARG2_SELECTED_VERSION" == wp* ]]; then
  # Handle Workplace versions - same PHP requirements as corresponding Moodle version
  WP_VERSION_NUM="${ARG2_SELECTED_VERSION#wp}"
  if [ "$WP_VERSION_NUM" == "50" ]; then
    export MOODLE_DOCKER_PHP_VERSION=8.2
    log "  PHP version: ${GREEN}8.2${RESET} ${YELLOW}(Workplace 5.0)${RESET}"
  elif [ "$WP_VERSION_NUM" == "45" ] || [ "$WP_VERSION_NUM" == "44" ]; then
    export MOODLE_DOCKER_PHP_VERSION=8.1
    log "  PHP version: ${GREEN}8.1${RESET} ${YELLOW}(Workplace)${RESET}"
  elif [ "$WP_VERSION_NUM" == "43" ] || [ "$WP_VERSION_NUM" == "42" ]; then
    export MOODLE_DOCKER_PHP_VERSION=8.0
    log "  PHP version: ${GREEN}8.0${RESET} ${YELLOW}(Workplace)${RESET}"
  else
    export MOODLE_DOCKER_PHP_VERSION=8.0
    log "  PHP version: ${GREEN}8.0${RESET} ${YELLOW}(Workplace - default)${RESET}"
  fi
else
  # Default to PHP 8.0 for unknown versions
  export MOODLE_DOCKER_PHP_VERSION=8.0
  log "  PHP version: ${GREEN}8.0${RESET} ${YELLOW}(default)${RESET}"
fi

log "  Database: ${GREEN}MariaDB${RESET}"
log "  Directory: $MOODLE_DOCKER_WWWROOT"
log ""
log "------------------------------------------------------------------------"
log "${GREEN}üîå Service Ports${RESET}"
log "------------------------------------------------------------------------"
log "  üåê Web server: ${CYAN}http://localhost:$MOODLE_DOCKER_WEB_PORT/${RESET}"
log "  üóÑÔ∏è  Database: ${CYAN}localhost:$MOODLE_DOCKER_DB_PORT${RESET}"
log "  üñ•Ô∏è  VNC (Selenium): ${CYAN}localhost:$MOODLE_DOCKER_SELENIUM_VNC_PORT${RESET} (password: secret)"
log ""
log "------------------------------------------------------------------------"
log "${GREEN}üîë Access Credentials${RESET}"
log "------------------------------------------------------------------------"
log "  Admin login: ${CYAN}admin / test${RESET}"
log ""
log "------------------------------------------------------------------------"
log "${GREEN}üõ†Ô∏è  Development Tools${RESET}"
log "------------------------------------------------------------------------"
log "  üìß Mail catcher: ${CYAN}http://localhost:$MOODLE_DOCKER_WEB_PORT/_/mail/${RESET}"
log "  üß™ Behat faildumps: ${CYAN}http://localhost:$MOODLE_DOCKER_WEB_PORT/_/faildumps/${RESET}"
log "  üìù Behat definitions: ${CYAN}http://localhost:$MOODLE_DOCKER_WEB_PORT/admin/tool/behat/index.php${RESET}"
log ""
log "------------------------------------------------------------------------"
log "${GREEN}üîó PHPStorm Path Mapping (OrbStack)${RESET}"
log "------------------------------------------------------------------------"
log "  Container path: ${CYAN}/var/www/html${RESET}"
log "  OrbStack path: ${CYAN}~/OrbStack/docker/containers/${COMPOSE_PROJECT_NAME}-webserver-1/var/www/html${RESET}"
log ""
log "  ${YELLOW}Example for local plugin:${RESET}"
log "  ${CYAN}~/OrbStack/docker/containers/${COMPOSE_PROJECT_NAME}-webserver-1/var/www/html/local/yourplugin${RESET}"
log ""
log "------------------------------------------------------------------------"
log "${GREEN}üìö Documentation${RESET}"
log "------------------------------------------------------------------------"
log "  Behat guide: https://moodledev.io/general/development/tools/behat"
log "  Writing tests: https://moodledev.io/general/development/tools/behat/writing"
log "  PHPUnit tests: https://docs.moodle.org/dev/Writing_PHPUnit_tests"
log "------------------------------------------------------------------------"
log ""

# ----------------------------------------------------------------

# START COMMAND
# ----------------------------------------------------------------
if [ "$ARG1_ACTION" == "start" ]; then
  log ""
  log "========================================================================"
  log "${GREEN}üöÄ Starting Moodle $ARG2_SELECTED_VERSION${RESET}"
  log "========================================================================"
  log ""

  # Check if this is a Workplace version (git-based) or standard Moodle (zip-based)
  if [[ "$download_url" == git:* ]]; then
    # Handle Moodle Workplace - Git-based installation
    WORKPLACE_BRANCH="${download_url#git:}"
    WORKPLACE_DIR="$SCRIPT_DIR_MOODLE_DOCKER/moodle/${ARG2_SELECTED_VERSION}"
    WORKPLACE_REPO="git@gitlab.avetica.net:moodle-source/moodle-workplace.git"

    if [ ! -d "$WORKPLACE_DIR" ]; then
      log "üì• Cloning Moodle Workplace $ARG2_SELECTED_VERSION..."
      log "   Repository: $WORKPLACE_REPO"
      log "   Branch: $WORKPLACE_BRANCH"
      log ""

      # Clone the repository
      if git clone "$WORKPLACE_REPO" "$WORKPLACE_DIR" 2>/dev/null; then
        cd "$WORKPLACE_DIR"
        git checkout "$WORKPLACE_BRANCH"
        cd - > /dev/null
        log "${GREEN}‚úì${RESET} Cloned successfully to: $WORKPLACE_DIR"
      else
        # Try HTTPS as fallback
        log "${YELLOW}SSH clone failed, trying HTTPS...${RESET}"
        WORKPLACE_REPO_HTTPS="https://gitlab.avetica.net/moodle-source/moodle-workplace.git"
        if git clone "$WORKPLACE_REPO_HTTPS" "$WORKPLACE_DIR" 2>/dev/null; then
          cd "$WORKPLACE_DIR"
          git checkout "$WORKPLACE_BRANCH"
          cd - > /dev/null
          log "${GREEN}‚úì${RESET} Cloned successfully via HTTPS"
        else
          abort "‚ùå Failed to clone Workplace repository. Please check your GitLab access."
        fi
      fi
    else
      # Repository already exists - check current branch and update
      log "üìÇ Workplace directory exists: $WORKPLACE_DIR"
      cd "$WORKPLACE_DIR"
      CURRENT_BRANCH=$(git branch --show-current)

      if [ "$CURRENT_BRANCH" != "$WORKPLACE_BRANCH" ]; then
        log "üîÑ Switching branch from $CURRENT_BRANCH to $WORKPLACE_BRANCH..."
        git fetch origin
        git checkout "$WORKPLACE_BRANCH"
        git pull origin "$WORKPLACE_BRANCH"
        log "${GREEN}‚úì${RESET} Switched to branch: $WORKPLACE_BRANCH"
      else
        log "üîÑ Updating branch $WORKPLACE_BRANCH..."
        git pull origin "$WORKPLACE_BRANCH"
        log "${GREEN}‚úì${RESET} Updated to latest: $WORKPLACE_BRANCH"
      fi
      cd - > /dev/null
    fi
  else
    # Handle standard Moodle - ZIP-based installation
    zip_file="$SCRIPT_DIR_MOODLE_DOCKER/moodle/${ARG2_SELECTED_VERSION}.zip"

    if [ ! -f "$zip_file" ]; then
      log "üì• Downloading Moodle $ARG2_SELECTED_VERSION..."
      log "   Source: $download_url"
      log ""

      if command -v wget >/dev/null 2>&1; then
        wget -O "$zip_file" "$download_url"
      elif command -v curl >/dev/null 2>&1; then
        curl -o "$zip_file" -L "$download_url"
      else
        abort "‚ùå Error: wget or curl is required to download the Moodle version."
      fi

      log "${GREEN}‚úì${RESET} Downloaded successfully to: $zip_file"
    else
      log "${GREEN}‚úì${RESET} Using cached download: $zip_file"
    fi

    # Unzipping Moodle.
    if [ ! -f "$zip_file" ]; then
      abort "‚ùå Failed to download $download_url"
    fi

    if [ ! -d "$SCRIPT_DIR_MOODLE_DOCKER/moodle/${ARG2_SELECTED_VERSION}" ]; then
      log "üì¶ Extracting Moodle files..."
      rm -rf "$SCRIPT_DIR_MOODLE_DOCKER/moodle/moodle"
      unzip -q "$zip_file" -d "$SCRIPT_DIR_MOODLE_DOCKER/moodle/"
      mv "$SCRIPT_DIR_MOODLE_DOCKER/moodle/moodle" "$SCRIPT_DIR_MOODLE_DOCKER/moodle/${ARG2_SELECTED_VERSION}"

      log "${GREEN}‚úì${RESET} Extracted to: ${SCRIPT_DIR_MOODLE_DOCKER}/moodle/${ARG2_SELECTED_VERSION}"
    else
      log "${GREEN}‚úì${RESET} Moodle directory exists: ${SCRIPT_DIR_MOODLE_DOCKER}/moodle/${ARG2_SELECTED_VERSION}"
    fi
  fi

  log ""
  log "üê≥ Docker Project: ${CYAN}$COMPOSE_PROJECT_NAME${RESET}"
  log ""

  cp "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker/config.docker-template.php" "$MOODLE_DOCKER_WWWROOT/config.php"
  cd "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" || abort "moodlehq-docker is missing"

  # Make sure Moodle is installed.
  if [ ! -f "$MOODLE_DOCKER_WWWROOT/version.php" ]; then
    abort "Failed to install Moodle in ($MOODLE_DOCKER_WWWROOT)"
  fi

  if [ ! -f "$MOODLE_DOCKER_WWWROOT/installed" ]; then

    log "üîß Setting up Docker containers..."
    bin/moodle-docker-compose up -d

    log "‚è≥ Waiting for database to be ready..."
    bin/moodle-docker-wait-for-db

    # Flag so we don't run this more than once.
    touch "$MOODLE_DOCKER_WWWROOT/installed"

    log "üóÑÔ∏è  Installing Moodle database..."
    bin/moodle-docker-compose exec webserver php admin/cli/install_database.php --agree-license --fullname="$COMPOSE_PROJECT_NAME" \
      --shortname="$COMPOSE_PROJECT_NAME" --summary="Docker moodle site $COMPOSE_PROJECT_NAME" --adminpass="test" --adminemail="admin@example.com"

    log "${GREEN}‚úì${RESET} Moodle database installed successfully"
    log ""

    # Add moodle developer tools.
    log "üß™ Initializing test frameworks..."

    # Initialize behat environment.
    log "  ‚Ä¢ Setting up Behat (acceptance testing)..."
    bin/moodle-docker-compose exec webserver php admin/tool/behat/cli/init.php
    log "${GREEN}  ‚úì${RESET} Behat initialized"

    # Initialize phpunit environment.
    log "  ‚Ä¢ Setting up PHPUnit (unit testing)..."
    bin/moodle-docker-compose exec webserver php admin/tool/phpunit/cli/init.php
    log "${GREEN}  ‚úì${RESET} PHPUnit initialized"
  else
    # Restart containers
    log "‚ôªÔ∏è  Restarting existing containers..."
    bin/moodle-docker-compose start
    log "${GREEN}‚úì${RESET} Containers restarted"
  fi

  log ""
  log "========================================================================"
  log "${GREEN}‚úÖ Moodle $ARG2_SELECTED_VERSION is ready!${RESET}"
  log "========================================================================"
  log ""
  log "üåê ${GREEN}Web Access:${RESET}"
  log "  ‚Ä¢ URL: ${CYAN}http://localhost:$MOODLE_DOCKER_WEB_PORT/${RESET}"
  log "  ‚Ä¢ Login: ${CYAN}admin / test${RESET}"
  log ""
  log "üñ•Ô∏è  ${GREEN}VNC Viewer (Watch Behat Tests):${RESET}"
  log "  ‚Ä¢ Connect to: ${CYAN}localhost:$MOODLE_DOCKER_SELENIUM_VNC_PORT${RESET}"
  log "  ‚Ä¢ Password: ${CYAN}secret${RESET}"
  log "  ‚Ä¢ Download viewer: ${YELLOW}https://www.realvnc.com/download/viewer/${RESET}"
  log ""
  log "üîó ${GREEN}PHPStorm Path Mapping:${RESET}"
  log "  ‚Ä¢ Project: ${CYAN}$MOODLE_DOCKER_WWWROOT${RESET}"
  log "  ‚Ä¢ OrbStack: ${CYAN}~/OrbStack/docker/containers/${COMPOSE_PROJECT_NAME}-webserver-1/var/www/html${RESET}"
  log ""
  log "üí° ${YELLOW}Tip:${RESET} Use VNC to watch Behat tests run in real-time!"
  log ""

# DESTROY COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "destroy" ]; then
  log ""
  log "========================================================================"
  log "${RED}üóëÔ∏è  Destroy Moodle $ARG2_SELECTED_VERSION${RESET}"
  log "========================================================================"
  log ""
  log "${YELLOW}‚ö†Ô∏è  This will permanently delete:${RESET}"
  log "  ‚Ä¢ All Docker containers for Moodle $ARG2_SELECTED_VERSION"
  log "  ‚Ä¢ Database and all data"
  log "  ‚Ä¢ Moodle installation directory"
  log "  ‚Ä¢ Downloaded zip file"
  log ""

  if confirm "${RED}Are you sure you want to proceed?${RESET}"; then

    # Shut down and destroy containers
    cd "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" || abort "moodlehq-docker is missing"

    log "üîÑ Shutting down containers..."
    bin/moodle-docker-compose down
    log "${GREEN}‚úì${RESET} Containers removed"

    log "üóëÔ∏è  Deleting Moodle files..."
    rm -rf "$MOODLE_DOCKER_WWWROOT"
    rm "$SCRIPT_DIR_MOODLE_DOCKER/../moodle/$ARG2_SELECTED_VERSION.zip" >/dev/null 2>&1
    log "${GREEN}‚úì${RESET} Files deleted"

    log ""
    log "${GREEN}‚úÖ Moodle $ARG2_SELECTED_VERSION has been completely removed.${RESET}"
    log ""
  else
    log "${YELLOW}‚ùå Operation cancelled.${RESET}"
  fi

# STOP COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "stop" ]; then
  log ""
  log "========================================================================"
  log "${YELLOW}‚èπÔ∏è  Stopping Moodle $ARG2_SELECTED_VERSION${RESET}"
  log "========================================================================"
  log ""

  cd "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" || abort "moodlehq-docker is missing"
  check_is_running

  log "üîÑ Stopping containers..."
  bin/moodle-docker-compose stop
  log ""
  log "${GREEN}‚úÖ Moodle $ARG2_SELECTED_VERSION containers stopped.${RESET}"
  log "${CYAN}üí° Tip: Use './moodle-docker start $ARG2_SELECTED_VERSION' to restart${RESET}"
  log ""

# BEHAT COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "behat" ]; then
  log ""
  log "========================================================================"
  log "${GREEN}üß™ Running Behat Tests - Moodle $ARG2_SELECTED_VERSION${RESET}"
  log "========================================================================"
  log ""

  # Check for interactive mode
  INTERACTIVE_MODE=false
  BEHAT_ARGS=""
  for arg in $ALL_REMAINING_ARGS; do
    if [[ "$arg" == "--interactive" ]] || [[ "$arg" == "-i" ]]; then
      INTERACTIVE_MODE=true
    else
      BEHAT_ARGS="$BEHAT_ARGS $arg"
    fi
  done

  # Display VNC information for watching tests
  log "üñ•Ô∏è  ${GREEN}VNC Connection Information:${RESET}"
  log "  ‚Ä¢ Host: localhost"
  log "  ‚Ä¢ Port: ${MOODLE_DOCKER_SELENIUM_VNC_PORT}"
  log "  ‚Ä¢ Password: secret"
  log ""
  log "üí° ${YELLOW}To watch tests in real-time:${RESET}"
  log "  1. Download VNC viewer: https://www.realvnc.com/download/viewer/"
  log "  2. Connect to: localhost:${MOODLE_DOCKER_SELENIUM_VNC_PORT}"
  log "  3. Enter password: secret"
  log ""

  if [ "$INTERACTIVE_MODE" = true ]; then
    log "üéÆ ${CYAN}Interactive mode enabled!${RESET}"
    log "  ‚Ä¢ Tests will pause at breakpoints (@pause tag)"
    log "  ‚Ä¢ Press Enter in terminal to continue at pause points"
    log "  ‚Ä¢ Tests will stop on first failure"
    log ""
    BEHAT_ARGS="$BEHAT_ARGS --verbose --stop-on-failure"
  fi

  log "üîß Command: php admin/tool/behat/cli/run.php $BEHAT_ARGS"
  log ""

  cd "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" || abort "moodlehq-docker is missing"
  check_is_running

  # Check if Behat is initialized
  BEHAT_INITIALIZED=$(bin/moodle-docker-compose exec webserver bash -c "[ -f /var/www/html/vendor/bin/behat ] && echo 'yes' || echo 'no'" 2>/dev/null | tr -d '\r\n')

  if [ "$BEHAT_INITIALIZED" = "no" ]; then
    log "‚ö†Ô∏è  ${YELLOW}Behat not initialized. Running initialization...${RESET}"
    log ""
    bin/moodle-docker-compose exec webserver php admin/tool/behat/cli/init.php
    log ""
    log "${GREEN}‚úÖ Behat initialization complete${RESET}"
    log ""
  fi

  # Pause for VNC connection in interactive mode
  if [ "$INTERACTIVE_MODE" = true ]; then
    log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    log "${YELLOW}‚è∏Ô∏è  PAUSE: Open your VNC viewer now!${RESET}"
    log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    log ""
    log "Connect VNC viewer to: ${CYAN}localhost:${MOODLE_DOCKER_SELENIUM_VNC_PORT}${RESET}"
    log "Password: ${CYAN}secret${RESET}"
    log ""
    log "${GREEN}Ready to start tests.${RESET}"
    read -p "Press Enter when VNC is connected (or to continue without VNC)..."
    log ""
    log "üöÄ Starting tests now..."
    log ""
  fi

  # Run with proper terminal interaction for pause support
  if [ "$INTERACTIVE_MODE" = true ]; then
    bin/moodle-docker-compose exec -it -u www-data webserver bash -ic "php admin/tool/behat/cli/run.php $BEHAT_ARGS"
  else
    bin/moodle-docker-compose exec -i -u www-data webserver bash -ic "php admin/tool/behat/cli/run.php $BEHAT_ARGS"
  fi

# PHPUNIT COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "phpunit" ]; then
  log ""
  log "========================================================================"
  log "${GREEN}üß¨ Running PHPUnit Tests - Moodle $ARG2_SELECTED_VERSION${RESET}"
  log "========================================================================"
  log ""
  log "üîß Command: vendor/bin/phpunit $ALL_REMAINING_ARGS"
  log ""

  cd "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" || abort "moodlehq-docker is missing"
  check_is_running

  # Check if PHPUnit is initialized - Moodle shows an error when not initialized
  # We use --list-tests as it triggers Moodle's environment check
  PHPUNIT_CHECK=$(bin/moodle-docker-compose exec webserver bash -c "cd /var/www/html && vendor/bin/phpunit --list-tests 2>&1 | head -5" 2>/dev/null || echo "error")

  # Check if PHPUnit environment is initialized by looking for the error message
  if echo "$PHPUNIT_CHECK" | grep -q "is not initialised" || echo "$PHPUNIT_CHECK" | grep -q "error" || [ ! -f "$MOODLE_DOCKER_WWWROOT/vendor/bin/phpunit" ]; then
    log "‚ö†Ô∏è  ${YELLOW}PHPUnit not initialized. Running initialization...${RESET}"
    log ""
    bin/moodle-docker-compose exec webserver php admin/tool/phpunit/cli/init.php
    log ""
    log "${GREEN}‚úÖ PHPUnit initialization complete${RESET}"
    log ""
  fi

  bin/moodle-docker-compose exec webserver vendor/bin/phpunit "$ALL_REMAINING_ARGS"

# GRUNT COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "grunt" ]; then
  log ""
  log "========================================================================"
  log "${GREEN}üî® Grunt Watch - Moodle $ARG2_SELECTED_VERSION${RESET}"
  log "========================================================================"
  log ""

  # Usage: moodle-docker grunt {version} [watch]
  cd "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" || abort "moodlehq-docker is missing"
  check_is_running

  # Get subcommand from remaining args
  GRUNT_SUBCOMMAND="${ALL_REMAINING_ARGS%% *}"
  if [ -z "$GRUNT_SUBCOMMAND" ]; then
    GRUNT_SUBCOMMAND="watch"
  fi

  if [ "$GRUNT_SUBCOMMAND" != "watch" ]; then
    abort "‚ùå Unknown grunt subcommand: $GRUNT_SUBCOMMAND (supported: watch)"
  fi

  log "üëÄ Starting grunt watch (will auto-rebuild JS/CSS on file changes)"
  log "${YELLOW}üí° Press Ctrl+C to stop watching${RESET}"
  log ""

  if [ "${MOODLE_DOCKER_GRUNT_METHOD:-dockerexec}" = "compose" ]; then
    # Run grunt watch with NVM bootstrap inside the container for www-data.
    bin/moodle-docker-compose exec -it -u www-data webserver bash -lc '
    set -uo pipefail
    export NVM_DIR="/var/www/html/.nvm"
    mkdir -p "$NVM_DIR"
    if [ ! -s "$NVM_DIR/nvm.sh" ]; then
      if command -v curl >/dev/null 2>&1; then
        curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
      elif command -v wget >/dev/null 2>&1; then
        wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
      else
        echo "curl or wget required to install nvm" >&2
        exit 1
      fi
    fi
    # shellcheck disable=SC1090
    . "$NVM_DIR/nvm.sh"

    cd /var/www/html
    NODEVER="20"
    if [ -f package.json ]; then
      echo "Checking package.json for Node version requirements..."
      NODE_REQ=$(grep -oE "\"node\"[[:space:]]*:[[:space:]]*\"[^\"]*\"" package.json 2>/dev/null | head -1)
      echo "Found Node requirement: $NODE_REQ"

      if echo "$NODE_REQ" | grep -qE "22\.|>=22" 2>/dev/null; then
        NODEVER="22"
      elif echo "$NODE_REQ" | grep -qE "20\.|>=20" 2>/dev/null; then
        NODEVER="20"
      elif echo "$NODE_REQ" | grep -qE "18\.|>=18" 2>/dev/null; then
        NODEVER="18"
      elif echo "$NODE_REQ" | grep -qE "16\.|>=16" 2>/dev/null; then
        NODEVER="16"
      fi
    fi

    echo "Using Node $NODEVER"
    nvm install "$NODEVER"
    nvm use "$NODEVER"
    node -v
    npm -v

    # Ensure grunt-cli and dependencies
    npm install -g grunt-cli
    if [ -f package-lock.json ]; then
      npm ci
    else
      npm install
    fi

    echo "Starting grunt watch (Ctrl+C to stop)"
    echo "========================================="

    # Trap SIGINT (Ctrl+C) to ensure clean exit
    trap "echo Stopping grunt watch...; exit 0" INT TERM

    # Run grunt watch with unbuffered output
    grunt watch
  '
  else
    # Fallback/default: use docker exec directly for reliable streaming
    container_name="${COMPOSE_PROJECT_NAME}-webserver-1"
    log "Attaching to container: $container_name"
    log "${YELLOW}Installing dependencies if needed (this may take a moment on first run)..."

    # Ensure bash and curl/wget are present for nvm install (best-effort; ignore failures)
    docker exec -u root "$container_name" sh -c 'command -v bash >/dev/null 2>&1 || (apt-get update && apt-get install -y bash >/dev/null 2>&1 || apk add --no-cache bash >/dev/null 2>&1 || dnf -y install bash >/dev/null 2>&1 || yum -y install bash >/dev/null 2>&1 || true)' 2>/dev/null
    docker exec -u root "$container_name" sh -c 'command -v curl >/dev/null 2>&1 || command -v wget >/dev/null 2>&1 || (apt-get update && apt-get install -y curl >/dev/null 2>&1 || apk add --no-cache curl >/dev/null 2>&1 || dnf -y install curl >/dev/null 2>&1 || yum -y install curl >/dev/null 2>&1 || true)' 2>/dev/null

    # Copy the runner script into the container then execute with a TTY for live output
    docker cp "$SCRIPT_DIR_MOODLE_DOCKER/scripts/grunt_watch_inside_container.sh" "$container_name:/tmp/grunt_watch_inside_container.sh"

    # Make script executable
    docker exec "$container_name" chmod +x /tmp/grunt_watch_inside_container.sh

    # Run the script with proper TTY allocation
    docker exec -it -u www-data "$container_name" bash -lc '/tmp/grunt_watch_inside_container.sh'
  fi

# XDEBUG COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "xdebug" ]; then

  # Check for subcommand - get first word from remaining args
  XDEBUG_SUBCOMMAND="${ALL_REMAINING_ARGS%% *}"
  if [ -z "$XDEBUG_SUBCOMMAND" ]; then
    XDEBUG_SUBCOMMAND="status"
  fi

  log ""
  log "========================================================================"
  log "${GREEN}üêû Xdebug Management - Moodle $ARG2_SELECTED_VERSION${RESET}"
  log "========================================================================"
  log ""

  cd "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" || abort "moodlehq-docker is missing"
  check_is_running

  case "$XDEBUG_SUBCOMMAND" in
    install)
      log "üì¶ Installing Xdebug..."
      bin/moodle-docker-compose exec webserver pecl install xdebug

      log "‚öôÔ∏è  Configuring Xdebug..."
      read -r -d '' conf <<'EOF'
; Settings for Xdebug Docker configuration
xdebug.mode = debug
xdebug.client_host = host.docker.internal
xdebug.client_port = 9003
xdebug.start_with_request = yes
xdebug.log_level = 0
; Uncomment for specific IDE key if needed
; xdebug.idekey=PHPSTORM
EOF
      bin/moodle-docker-compose exec webserver bash -c "echo '$conf' >> /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini"

      log "‚úÖ Enabling Xdebug extension..."
      bin/moodle-docker-compose exec webserver docker-php-ext-enable xdebug
      bin/moodle-docker-compose restart webserver

      log ""
      log "${GREEN}‚úÖ Xdebug installed and enabled!${RESET}"
      log ""
      log "üìù Configuration:"
      log "  ‚Ä¢ Mode: debug"
      log "  ‚Ä¢ Client host: host.docker.internal"
      log "  ‚Ä¢ Port: 9003"
      log ""
      log "${YELLOW}üí° Configure your IDE to listen on port 9003${RESET}"
      log "${YELLOW}üí° For Linux users: You may need to use 'localhost' or your host IP instead of 'host.docker.internal'${RESET}"
      ;;

    enable)
      log "‚úÖ Enabling Xdebug..."
      bin/moodle-docker-compose exec webserver sed -i 's/^; zend_extension=/zend_extension=/' /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini 2>/dev/null
      bin/moodle-docker-compose restart webserver
      log "${GREEN}‚úì${RESET} Xdebug enabled"
      ;;

    disable)
      log "‚è∏Ô∏è  Disabling Xdebug..."
      bin/moodle-docker-compose exec webserver sed -i 's/^zend_extension=/; zend_extension=/' /usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini 2>/dev/null
      bin/moodle-docker-compose restart webserver
      log "${GREEN}‚úì${RESET} Xdebug disabled"
      ;;

    status)
      log "üîç Checking Xdebug status..."
      XDEBUG_STATUS=$(bin/moodle-docker-compose exec webserver php -r "echo extension_loaded('xdebug') ? 'installed and enabled' : 'not installed or disabled';" 2>/dev/null || echo "not installed")
      log "  Status: ${GREEN}$XDEBUG_STATUS${RESET}"

      if [[ "$XDEBUG_STATUS" == *"enabled"* ]]; then
        log ""
        log "üìã Current configuration:"
        bin/moodle-docker-compose exec webserver php -i 2>/dev/null | grep -E "^xdebug\." | head -10
      fi
      ;;

    *)
      log "${RED}‚ùå Unknown subcommand: $XDEBUG_SUBCOMMAND${RESET}"
      log ""
      log "Usage: moodle-docker xdebug {version} [install|enable|disable|status]"
      log ""
      log "Commands:"
      log "  install  - Install and configure Xdebug"
      log "  enable   - Enable Xdebug if already installed"
      log "  disable  - Disable Xdebug temporarily"
      log "  status   - Check Xdebug status (default)"
      exit 1
      ;;
  esac

# INIT COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "init" ]; then
  log ""
  log "========================================================================"
  log "${GREEN}üîÑ Re-initializing Test Databases - Moodle $ARG2_SELECTED_VERSION${RESET}"
  log "========================================================================"
  log ""
  log "${YELLOW}This will rebuild the test databases for:${RESET}"
  log "  ‚Ä¢ PHPUnit (unit tests)"
  log "  ‚Ä¢ Behat (acceptance tests)"
  log ""
  log "${CYAN}Note: This drops and rebuilds test databases - production data is not affected.${RESET}"
  log ""

  cd "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" || abort "moodlehq-docker is missing"
  check_is_running

  # Drop and re-initialize PHPUnit environment
  log "üß¨ ${YELLOW}Re-initializing PHPUnit test database...${RESET}"
  log "  Dropping old test database..."
  bin/moodle-docker-compose exec webserver php admin/tool/phpunit/cli/util.php --drop 2>/dev/null || true
  log "  Building new test database..."
  bin/moodle-docker-compose exec webserver php admin/tool/phpunit/cli/init.php
  log "${GREEN}  ‚úì PHPUnit database rebuilt${RESET}"
  log ""

  # Drop and re-initialize Behat environment
  log "üß™ ${YELLOW}Re-initializing Behat test database...${RESET}"
  log "  Dropping old test database..."
  bin/moodle-docker-compose exec webserver php admin/tool/behat/cli/util.php --drop 2>/dev/null || true
  log "  Building new test database..."
  bin/moodle-docker-compose exec webserver php admin/tool/behat/cli/init.php
  log "${GREEN}  ‚úì Behat database rebuilt${RESET}"
  log ""

  log "========================================================================"
  log "${GREEN}‚úÖ Test databases successfully re-initialized!${RESET}"
  log "========================================================================"
  log ""
  log "You can now run tests with fresh databases:"
  log "  ‚Ä¢ PHPUnit: ${CYAN}moodle-docker phpunit $ARG2_SELECTED_VERSION <test>${RESET}"
  log "  ‚Ä¢ Behat: ${CYAN}moodle-docker behat $ARG2_SELECTED_VERSION <options>${RESET}"
  log ""

# UPDATE COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "update" ]; then

  log "${GREEN}Updating container behat + unit tests init again."
  cd "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" || abort "moodlehq-docker is missing"
  check_is_running

  # Initialize behat environment.
  log "Installing Moodle behat"
  bin/moodle-docker-compose exec webserver php admin/tool/behat/cli/init.php

  # Initialize phpunit environment.
  log "Installing Moodle phpunit"
  bin/moodle-docker-compose exec webserver php admin/tool/phpunit/cli/init.php

# CRON COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "cron" ]; then
  log ""
  log "========================================================================"
  log "${GREEN}‚è∞ Running Moodle Cron - Moodle $ARG2_SELECTED_VERSION${RESET}"
  log "========================================================================"
  log ""

  cd "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" || abort "moodlehq-docker is missing"
  check_is_running

  # Check for subcommand - get first word from remaining args
  CRON_MODE="${ALL_REMAINING_ARGS%% *}"
  if [ -z "$CRON_MODE" ] || [ "$CRON_MODE" == "once" ]; then
    # Run cron once
    log "üîÑ Running cron once..."
    log ""
    log "${YELLOW}Command: php admin/cli/cron.php${RESET}"
    log ""
    log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    bin/moodle-docker-compose exec webserver php admin/cli/cron.php
    log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    log ""
    log "${GREEN}‚úÖ Cron run completed${RESET}"

  elif [ "$CRON_MODE" == "watch" ] || [ "$CRON_MODE" == "continuous" ]; then
    # Run cron continuously
    log "üîÑ Running cron continuously (every 60 seconds)..."
    log "${YELLOW}Press Ctrl+C to stop${RESET}"
    log ""
    log "${CYAN}Note: In production, cron should run via system crontab.${RESET}"
    log "${CYAN}This continuous mode is for development/debugging only.${RESET}"
    log ""
    log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

    # Trap SIGINT (Ctrl+C) to ensure clean exit
    trap 'echo ""; log "${YELLOW}Stopping cron watch...${RESET}"; exit 0' INT TERM

    while true; do
      log ""
      log "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] Starting cron run...${RESET}"
      log "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
      bin/moodle-docker-compose exec webserver php admin/cli/cron.php
      log "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
      log "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] Cron run completed. Waiting 60 seconds...${RESET}"
      sleep 60
    done

  elif [ "$CRON_MODE" == "scheduled" ]; then
    # Show scheduled tasks
    log "üìÖ Showing scheduled tasks..."
    log ""
    bin/moodle-docker-compose exec webserver php admin/cli/scheduled_task.php --list
    log ""
    log "${CYAN}To run a specific task, use:${RESET}"
    log "${GREEN}moodle-docker task ${ARG2_SELECTED_VERSION} run \\\\path\\\\to\\\\task${RESET}"

  else
    log "${RED}‚ùå Unknown cron mode: $CRON_MODE${RESET}"
    log ""
    log "Usage: moodle-docker cron {version} [mode]"
    log ""
    log "Modes:"
    log "  ${GREEN}once${RESET}       - Run cron once (default)"
    log "  ${GREEN}watch${RESET}      - Run cron continuously every 60 seconds"
    log "  ${GREEN}continuous${RESET} - Same as 'watch'"
    log "  ${GREEN}scheduled${RESET}  - List scheduled tasks (use 'task' command for more options)"
    log ""
    log "Examples:"
    log "  ${CYAN}moodle-docker cron 45${RESET}         # Run cron once"
    log "  ${CYAN}moodle-docker cron 45 watch${RESET}   # Run continuously"
    log "  ${CYAN}moodle-docker cron 45 scheduled${RESET} # List scheduled tasks"
  fi

# TASK COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "task" ]; then
  log ""
  log "========================================================================"
  log "${GREEN}üìã Scheduled Task Management - Moodle $ARG2_SELECTED_VERSION${RESET}"
  log "========================================================================"
  log ""

  cd "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" || abort "moodlehq-docker is missing"
  check_is_running

  # Get the subcommand
  TASK_MODE="${1:-list}"
  shift || true
  TASK_ARGS="$@"

  case "$TASK_MODE" in
    list)
      # List all scheduled tasks
      log "üìÖ Available scheduled tasks:"
      log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
      log ""

      # Get the list with better formatting
      TASK_OUTPUT=$(bin/moodle-docker-compose exec webserver php admin/cli/scheduled_task.php --list 2>/dev/null)

      if [ -n "$TASK_OUTPUT" ]; then
        echo "$TASK_OUTPUT" | while IFS= read -r line; do
          # Highlight task paths in green
          if [[ "$line" == *"\\"* ]]; then
            # Extract the task class name
            TASK_CLASS=$(echo "$line" | grep -oE '\\[^[:space:]]+' | head -1)
            if [ -n "$TASK_CLASS" ]; then
              # Format the output nicely
              FORMATTED_LINE=$(echo "$line" | sed "s|$TASK_CLASS|${GREEN}$TASK_CLASS${RESET}|")
              log "$FORMATTED_LINE"
            else
              log "$line"
            fi
          else
            log "$line"
          fi
        done
      else
        log "${YELLOW}No tasks found or unable to retrieve task list.${RESET}"
      fi

      log ""
      log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
      log ""
      log "${CYAN}To run a specific task:${RESET}"
      log "  ${GREEN}moodle-docker task ${ARG2_SELECTED_VERSION} run \\\\full\\\\class\\\\name${RESET}"
      log ""
      log "${CYAN}To select a task interactively:${RESET}"
      log "  ${GREEN}moodle-docker task ${ARG2_SELECTED_VERSION} select${RESET}       # Interactive menu"
      log "  ${GREEN}moodle-docker task ${ARG2_SELECTED_VERSION} select 5${RESET}     # Run task #5 directly"
      ;;

    select)
      # Interactive task selection - check if a number was provided
      PRESELECTED_NUMBER=""
      if [ -n "$TASK_ARGS" ]; then
        # Check if the argument is a number
        if [[ "$TASK_ARGS" =~ ^[0-9]+$ ]]; then
          PRESELECTED_NUMBER="$TASK_ARGS"
          log "üîç Using task number: $PRESELECTED_NUMBER"
        else
          log "${RED}‚ùå Error: Invalid selection number '$TASK_ARGS'${RESET}"
          log ""
          log "Usage: moodle-docker task ${ARG2_SELECTED_VERSION} select [number]"
          log ""
          log "Examples:"
          log "  ${GREEN}moodle-docker task ${ARG2_SELECTED_VERSION} select${RESET}      # Interactive selection"
          log "  ${GREEN}moodle-docker task ${ARG2_SELECTED_VERSION} select 5${RESET}    # Run task #5 directly"
          exit 1
        fi
      else
        log "üîç Loading available tasks..."
      fi
      log ""

      # Get task list and create an array
      TASKS_RAW=$(bin/moodle-docker-compose exec webserver php admin/cli/scheduled_task.php --list 2>/dev/null | grep '\\' | grep -oE '\\[^[:space:]]+' | sort -u)

      if [ -z "$TASKS_RAW" ]; then
        log "${RED}‚ùå No tasks found or unable to retrieve task list.${RESET}"
        exit 1
      fi

      # Convert to array
      IFS=$'\n' read -d '' -ra TASKS_ARRAY <<< "$TASKS_RAW" || true

      # If number was pre-selected, validate it
      if [ -n "$PRESELECTED_NUMBER" ]; then
        if [ "$PRESELECTED_NUMBER" -ge 1 ] && [ "$PRESELECTED_NUMBER" -le "${#TASKS_ARRAY[@]}" ]; then
          SELECTION="$PRESELECTED_NUMBER"
          SELECTED_TASK="${TASKS_ARRAY[$((SELECTION-1))]}"

          # Show what task will be run
          DISPLAY_NAME=$(echo "$SELECTED_TASK" | sed 's/\\/\//g' | awk -F'/' '{print $NF}')
          log "üìã Selected task #$SELECTION: ${GREEN}$DISPLAY_NAME${RESET}"
          log "   Full path: ${CYAN}$SELECTED_TASK${RESET}"
          log ""
        else
          log "${RED}‚ùå Error: Task number $PRESELECTED_NUMBER is out of range (1-${#TASKS_ARRAY[@]})${RESET}"
          log ""
          log "Use 'moodle-docker task ${ARG2_SELECTED_VERSION} list' to see available tasks"
          exit 1
        fi
      else
        # Display tasks with numbers for interactive selection
        log "${CYAN}Available tasks:${RESET}"
        log "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

        INDEX=1
        for task in "${TASKS_ARRAY[@]}"; do
          # Make the display more readable by showing just the class name
          DISPLAY_NAME=$(echo "$task" | sed 's/\\/\//g' | awk -F'/' '{print $NF}')
          printf "[%2d] %-30s %s\n" "$INDEX" "$DISPLAY_NAME" "${CYAN}$task${RESET}"
          ((INDEX++))
        done

        log "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
        log ""
        log "${CYAN}Tip: You can run a task directly with: moodle-docker task ${ARG2_SELECTED_VERSION} select <number>${RESET}"
        log ""

        # Prompt for selection
        while true; do
          read -p "Select a task number (1-${#TASKS_ARRAY[@]}) or 'q' to quit: " SELECTION

          if [ "$SELECTION" == "q" ] || [ "$SELECTION" == "Q" ]; then
            log "${YELLOW}Task selection cancelled.${RESET}"
            exit 0
          fi

          if [[ "$SELECTION" =~ ^[0-9]+$ ]] && [ "$SELECTION" -ge 1 ] && [ "$SELECTION" -le "${#TASKS_ARRAY[@]}" ]; then
            SELECTED_TASK="${TASKS_ARRAY[$((SELECTION-1))]}"
            break
          else
            log "${RED}Invalid selection. Please enter a number between 1 and ${#TASKS_ARRAY[@]}.${RESET}"
          fi
        done
      fi

      # Run the selected task
      log ""
      log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
      log "${GREEN}Running task: $SELECTED_TASK${RESET}"
      log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
      log ""

      bin/moodle-docker-compose exec webserver php admin/cli/scheduled_task.php --execute="$SELECTED_TASK"

      log ""
      log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
      log "${GREEN}‚úÖ Task completed: $SELECTED_TASK${RESET}"
      log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
      ;;

    run|execute)
      # Run a specific task
      if [ -z "$TASK_ARGS" ]; then
        log "${RED}‚ùå Error: Task class name required${RESET}"
        log ""
        log "Usage: moodle-docker task ${ARG2_SELECTED_VERSION} run \\\\full\\\\class\\\\name"
        log ""
        log "Example:"
        log "  ${GREEN}moodle-docker task ${ARG2_SELECTED_VERSION} run \\\\core\\\\task\\\\session_cleanup_task${RESET}"
        log ""
        log "To see available tasks:"
        log "  ${GREEN}moodle-docker task ${ARG2_SELECTED_VERSION} list${RESET}"
        exit 1
      fi

      TASK_CLASS="$TASK_ARGS"

      log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
      log "${GREEN}Running task: $TASK_CLASS${RESET}"
      log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
      log ""

      bin/moodle-docker-compose exec webserver php admin/cli/scheduled_task.php --execute="$TASK_CLASS"

      RESULT=$?
      log ""

      if [ $RESULT -eq 0 ]; then
        log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        log "${GREEN}‚úÖ Task completed successfully${RESET}"
        log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
      else
        log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        log "${RED}‚ùå Task failed or class not found${RESET}"
        log "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        log ""
        log "${YELLOW}Tips:${RESET}"
        log "  ‚Ä¢ Make sure the task class exists"
        log "  ‚Ä¢ Use double backslashes: \\\\core\\\\task\\\\session_cleanup_task"
        log "  ‚Ä¢ Run 'moodle-docker task ${ARG2_SELECTED_VERSION} list' to see available tasks"
      fi
      ;;

    *)
      log "${RED}‚ùå Unknown task mode: $TASK_MODE${RESET}"
      log ""
      log "Usage: moodle-docker task {version} [mode] [arguments]"
      log ""
      log "Modes:"
      log "  ${GREEN}list${RESET}        - List all available scheduled tasks (default)"
      log "  ${GREEN}select${RESET}      - Interactive task selection and execution"
      log "  ${GREEN}select N${RESET}    - Run task number N directly (e.g., select 5)"
      log "  ${GREEN}run${RESET}         - Run a specific task by class name"
      log "  ${GREEN}execute${RESET}     - Same as 'run'"
      log ""
      log "Examples:"
      log "  ${CYAN}# List all tasks${RESET}"
      log "  moodle-docker task ${ARG2_SELECTED_VERSION}"
      log ""
      log "  ${CYAN}# Interactive selection${RESET}"
      log "  moodle-docker task ${ARG2_SELECTED_VERSION} select"
      log ""
      log "  ${CYAN}# Run task #5 directly${RESET}"
      log "  moodle-docker task ${ARG2_SELECTED_VERSION} select 5"
      log ""
      log "  ${CYAN}# Run specific task by class${RESET}"
      log "  moodle-docker task ${ARG2_SELECTED_VERSION} run \\\\core\\\\task\\\\session_cleanup_task"
      exit 1
      ;;
  esac

else
  log "Unknown command $ARG1_ACTION"
fi
