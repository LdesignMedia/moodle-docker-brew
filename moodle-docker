#!/usr/bin/env bash
# Author: Luuk Verhoeven
# Date: 01.05.2023, 06:20
# Description:
# Simple starter for Moodle docker containers.
# Uses https://github.com/moodlehq/moodle-docker
# Tested on MacOS with https://orbstack.dev/download
#
#
#                               `.:;+o***ooi;.`
#                                `,;o*%%&##########&*:`
#                              '+&%%%***%%%%&$$$$$$$##&i`
#                            `+$$%********%&$$$$$$$$$$$#&,
#                           ,&&%*********&$$$$$$$$$$$$$$$$:
#                          ,#$%********&$$$$$$$$$$$$$$$$$$o:
#                         .$$$$&*****%%$$$########$$$$$$$$*i:
#                         %$$##$&%**%$%.'..,::;i+*$$$$$$$$*i+.
#                        '$#&o;,&$&&$$$+;ooi;:;i*%&$$$$$$$*iii
#                        .$+::,;$$$$$$$$#$*%;`',,+#$$$$$$$oiii`
#                        .oo&%&$$$$$$$$$$%*%,'.$&:.$$$$$$$+iii`
#                        .#*+:`+$$$$$$$$$@%.,,+@@@i&$$$$$&iiii'
#                        ,*.*,`+#$$$$$$$$#@#&$@@@##$$$$$$%iii;
#                        ,,*%;+##$$$$$$$$$$$$$$$$$$$$$$$$oiioo,
#                        .$&@@##$$$$##$$$$$$$$$$$$$$$$$$$i+%*o%;
#                        .$$&&&$%$$&**$$$$$$$$$$$$$$$$$$%i+i;;;+.
#                        .$$$$$$oiii;o$$$$$$$$$$$$$$$$$$oii;i;ii,
#                        .$$$$$$$%%%$#$$$$$$$$$$$$$$$$$&iii;ii;+,
#                        '$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*iiiii;ii`
#                        '$$$$$$$$$$$$$$&&&&$$$$$$$$$$&iii;;ii:'
#                         &$$$$$&&&&&$&&&$$$$$$$$$$$$#*i++ii,`
#                         o#$$$$&&$$&&$$$$$$$$$$$$$$#%+;'..`
#                         .#$$$$$$%o+%$$$$$$$$$$$$$$%+i`
#                          ;#$$$$$$$$$$$$$$$$$$$$$$*ii`
#                           :$#$$$$$$$$$$$$$$$$$&*+;i;
#                            'o#$$$$$$$$$$$$$&%oi;;;i;....'
#                              ,&#$$$$$$$$%o+i;;;iii+;...,::
#                               `;%###$%oi;;;iiiiiiii;,:;;ii`
#                                `.;ii;;;;;;i;i;;;;;;iiiiiii`
#                              `.....',+ii+*%*iiiiiiiiiiiii;
#                             ;**%%,..;$*i%$$$%;iiiiiiiiiii;
#                             ;#$$$+..i##%&$$&$*;iiiiiiiiii;
#                             `&$&$*.';%**$$$$$$o;iiiiiiiiii'
#                              +$&$&,,ioi%$$$$$$$o;iiiiiiiii: `
#                              o$&$$+oooo$$$$$$$$$+;iiiiii;;:.''
#                             '%$&$$*+o+*$$$$$$$$$$o;;;:;;:,.'.,,'
#                           `,i*&$$$%+o+&$$$$$$&&%%*oo++;:,''.:;;;;,.
#                         `'::*%o%$$&++o$$$$&%******%%o+:::io*ooo**%%o;.`
#                       ';*i:;%*%**&$o+&$&%****%%%%%oi::;+*%%%%%%%%**%%%*+:
#                     ,+%%%;:i%*%%****o%*****%%%%%*i::;+*%%******%%%%***%%%+`
#                   :*%%***;:;*%%*%%*******%%*%%*i;,;+*%%*%%%%%%%%%%%%%%***%i
#                 `o%%****%;::*%*%%o*%%%%*o+o**i;:;i*%%*%%%%%%%%%%%%%%%%%%**%.
#                 +%**%%%%%i::o%%oio%**%%%%*i:;,;;*%%**%%%%%%%%%%%%%%%%%%%*%*;'
#

# Examples:
# moodle-docker help
# moodle-docker start 42
# moodle-docker start 41
# moodle-docker start 311
# moodle-docker start 39
# moodle-docker update 41
# moodle-docker stop 41
# moodle-docker destroy 41
# moodle-docker behat 41 addtional

# VARS.
PLUGIN_VERSION="0.0.5"
MOODLE_LIST=$(cat /opt/moodle-docker/moodle_versions.txt)
VERSIONS=$(echo "$MOODLE_LIST" | awk -F'|' '{ print $1 }')
ARG2_SELECTED_VERSION=""
VERSION_FOUND=0
ARG1_ACTION="$1"
ARG2_SELECTED_VERSION="$2"
# ----------------------------------------------------------------

source "${HOMEBREW_PREFIX}/opt/moodle-docker/bin/scripts/helper.sh"
log "${GREEN}Moodle docker brew v$PLUGIN_VERSION by Ldesign Media"
log "${YELLOW}You can read the full documentation here: https://github.com/LdesignMedia/moodle-docker-brew"

if [ "$ARG1_ACTION" == "help" ] || [ "$ARG1_ACTION" == "-help" ]; then
  log "Usage: $0 command moodleversion [arg3 arg4 ...]"
  log "command: start | update | stop | destroy | info | behat | phpunit | upgrade"
  log "Example of moodleversion: 42,41,40,311,310,39"
  log "More arguments are optional for phpunit or behat"

  abort
fi

if [ "$ARG1_ACTION" == "upgrade" ]; then
  log "${GREEN}Moodle upgrade brew package"
  log "TODO"
  abort "-"
fi

# Validate we can run the script.
setup

# Check if at least two argument is provided
if [ "$#" -lt 2 ]; then
  abort "Usage: $0 command moodleversion [arg3 arg4 ...]"
fi

# Check if the provided version is in the list
for version in $VERSIONS; do
  if [ "$version" == "$ARG2_SELECTED_VERSION" ]; then
    VERSION_FOUND=1
    break
  fi
done

if [ ! $VERSION_FOUND -eq 1 ]; then
  abort "The provided version $ARG2_SELECTED_VERSION is not in the Moodle version list."
fi

# Get the corresponding download URL
download_url=$(echo "$MOODLE_LIST" | grep "^$ARG2_SELECTED_VERSION|" | awk -F'|' '{ print $2 }')

if [ -z "$download_url" ]; then
  abort "Invalid selection. Please try again."
fi

# Remove the first argument
shift
shift
ALL_REMAINING_ARGS="$@"

# Validate the first argument
case "$ARG1_ACTION" in
start | update | stop | destroy | info | behat | phpunit) ;;
*)
  abort "Error: Invalid first argument. Allowed values are: start, update, stop, destroy."
  ;;
esac

# LOGGING ----------------------------------------------------------------
log "Argument remaining: $ALL_REMAINING_ARGS"
log "${GREEN}Selected Moodle version: $ARG2_SELECTED_VERSION"
git submodule update --init --recursive
# ----------------------------------------------------------------

# EXPORTS ----------------------------------------------------------------
export COMPOSE_PROJECT_NAME="moodle${ARG2_SELECTED_VERSION}"
export MOODLE_DOCKER_DB=mariadb
export MOODLE_DOCKER_DB_PORT="330${ARG2_SELECTED_VERSION}"
export MOODLE_DOCKER_SELENIUM_VNC_PORT="590${ARG2_SELECTED_VERSION}"
export MOODLE_DOCKER_WEB_PORT="80${ARG2_SELECTED_VERSION}"
export MOODLE_DOCKER_WWWROOT="${PWD}/moodle/${ARG2_SELECTED_VERSION}"

# Set PHP for older versions
if [ "$ARG2_SELECTED_VERSION" == "39" ]; then
  export MOODLE_DOCKER_PHP_VERSION=7.4
  log "Running with the PHP version: 7.4 (See: https://docs.moodle.org/402/en/PHP)"
else
  log "Running with the PHP version: 8.0"
  export MOODLE_DOCKER_PHP_VERSION=8.0
fi

log "${YELLOW}DB port: $MOODLE_DOCKER_DB_PORT"
log "${YELLOW}VNC port: $MOODLE_DOCKER_SELENIUM_VNC_PORT"
log "${YELLOW}Webserver port: $MOODLE_DOCKER_WEB_PORT"
log "${YELLOW}Directory: $MOODLE_DOCKER_WWWROOT"
log "${YELLOW}When running Available on: http://localhost:$MOODLE_DOCKER_WEB_PORT/"
# ----------------------------------------------------------------

# START COMMAND
# ----------------------------------------------------------------
if [ "$ARG1_ACTION" == "start" ]; then

  # Download the zip file to the moodle directory and name it using the selected_version
  zip_file="moodle/${ARG2_SELECTED_VERSION}.zip"

  if [ ! -f "$zip_file" ]; then

    if command -v wget >/dev/null 2>&1; then
      wget -O "$zip_file" "$download_url"
    elif command -v curl >/dev/null 2>&1; then
      curl -o "$zip_file" -L "$download_url"
    else
      abort "Error: wget or curl is required to download the Moodle version."
    fi

    log "Moodle version $ARG2_SELECTED_VERSION downloaded to: $zip_file"
  else
    log "Already downloaded to: $zip_file"
  fi

  # Unzipping Moodle.
  if [ ! -f "$zip_file" ]; then
    abort "Failed to download  $download_url"
  fi

  if [ ! -d "moodle/${ARG2_SELECTED_VERSION}" ]; then
    rm -rf "moodle/moodle"
    unzip -q "$zip_file" -d "moodle/"
    mv "moodle/moodle" "moodle/${ARG2_SELECTED_VERSION}"

    log "${GREEN}Moodle directory available at ${PWD}/moodle/${ARG2_SELECTED_VERSION}"
  else
    log "${GREEN}Moodle directory available at ${PWD}/moodle/${ARG2_SELECTED_VERSION}"
  fi

  log "$COMPOSE_PROJECT_NAME"

  cp "moodlehq-docker/config.docker-template.php" "$MOODLE_DOCKER_WWWROOT/config.php"
  cd "moodlehq-docker" || abort "moodlehq-docker is missing"

  # Make sure Moodle is installed.
  if [ ! -f "$MOODLE_DOCKER_WWWROOT/version.php" ]; then
    abort "Failed to install Moodle in ($MOODLE_DOCKER_WWWROOT)"
  fi

  if [ ! -f "$MOODLE_DOCKER_WWWROOT/installed" ]; then

    bin/moodle-docker-compose up -d

    # Wait for DB to come up (important for oracle/mssql)
    bin/moodle-docker-wait-for-db

    # Flag so we don't run this more than once.
    touch "$MOODLE_DOCKER_WWWROOT/installed"

    bin/moodle-docker-compose exec webserver php admin/cli/install_database.php --agree-license --fullname="$COMPOSE_PROJECT_NAME" \
      --shortname="$COMPOSE_PROJECT_NAME" --summary="Docker moodle site $COMPOSE_PROJECT_NAME" --adminpass="test" --adminemail="admin@example.com"

    log "Installing Moodle completed successfully"
    # Add moodle developer tools.

    # Initialize behat environment.
    log "Installing Moodle behat"
    bin/moodle-docker-compose exec webserver php admin/tool/behat/cli/init.php

    # Initialize phpunit environment.
    log "Installing Moodle phpunit"

    bin/moodle-docker-compose exec webserver php admin/tool/phpunit/cli/init.php
  else
    # Restart containers
    bin/moodle-docker-compose start
  fi

  log "${YELLOW}Available on: http://localhost:$MOODLE_DOCKER_WEB_PORT/"

# DESTROY COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "destroy" ]; then
  log "${MAGENTA}Destroying Moodle installation and docker containers."

  if confirm "Do you want to proceed?"; then

    # Shut down and destroy containers
    cd "moodlehq-docker" || abort "moodlehq-docker is missing"

    bin/moodle-docker-compose down

    rm -rf "$MOODLE_DOCKER_WWWROOT"
    rm "../moodle/$ARG2_SELECTED_VERSION.zip" >/dev/null

  fi

# STOP COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "stop" ]; then

  log "${GREEN}stopping docker containers."
  cd "moodlehq-docker" || abort "moodlehq-docker is missing"
  check_is_running

  # Shut down and destroy containers
  bin/moodle-docker-compose stop

# BEHAT COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "behat" ]; then
  log "${GREEN}bin/moodle-docker-compose exec -u www-data webserver php admin/tool/behat/cli/run.php $ALL_REMAINING_ARGS"

  cd "moodlehq-docker" || abort "moodlehq-docker is missing"
  check_is_running

  bin/moodle-docker-compose exec -u www-data webserver php admin/tool/behat/cli/run.php "$ALL_REMAINING_ARGS"

# PHPUNIT COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "phpunit" ]; then
  log "${GREEN}bin/moodle-docker-compose exec webserver vendor/bin/phpunit $ALL_REMAINING_ARGS"

  cd "moodlehq-docker" || abort "moodlehq-docker is missing"
  check_is_running

  bin/moodle-docker-compose exec webserver vendor/bin/phpunit "$ALL_REMAINING_ARGS"

# UPDATE COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "update" ]; then

  log "${GREEN}Updating container"
  cd "moodlehq-docker" || abort "moodlehq-docker is missing"
  check_is_running

else
  log "Unknown command $ARG1_ACTION"
fi
