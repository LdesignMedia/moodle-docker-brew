#!/bin/bash -i
# Author: Luuk Verhoeven
# Date: 01.05.2023, 06:20
# Description:
# Simple starter for Moodle docker containers.
# Uses https://github.com/moodlehq/moodle-docker
# Tested on MacOS with https://orbstack.dev/download
#
#
#                               `.:;+o***ooi;.`
#                                `,;o*%%&##########&*:`
#                              '+&%%%***%%%%&$$$$$$$##&i`
#                            `+$$%********%&$$$$$$$$$$$#&,
#                           ,&&%*********&$$$$$$$$$$$$$$$$:
#                          ,#$%********&$$$$$$$$$$$$$$$$$$o:
#                         .$$$$&*****%%$$$########$$$$$$$$*i:
#                         %$$##$&%**%$%.'..,::;i+*$$$$$$$$*i+.
#                        '$#&o;,&$&&$$$+;ooi;:;i*%&$$$$$$$*iii
#                        .$+::,;$$$$$$$$#$*%;`',,+#$$$$$$$oiii`
#                        .oo&%&$$$$$$$$$$%*%,'.$&:.$$$$$$$+iii`
#                        .#*+:`+$$$$$$$$$@%.,,+@@@i&$$$$$&iiii'
#                        ,*.*,`+#$$$$$$$$#@#&$@@@##$$$$$$%iii;
#                        ,,*%;+##$$$$$$$$$$$$$$$$$$$$$$$$oiioo,
#                        .$&@@##$$$$##$$$$$$$$$$$$$$$$$$$i+%*o%;
#                        .$$&&&$%$$&**$$$$$$$$$$$$$$$$$$%i+i;;;+.
#                        .$$$$$$oiii;o$$$$$$$$$$$$$$$$$$oii;i;ii,
#                        .$$$$$$$%%%$#$$$$$$$$$$$$$$$$$&iii;ii;+,
#                        '$$$$$$$$$$$$$$$$$$$$$$$$$$$$$*iiiii;ii`
#                        '$$$$$$$$$$$$$$&&&&$$$$$$$$$$&iii;;ii:'
#                         &$$$$$&&&&&$&&&$$$$$$$$$$$$#*i++ii,`
#                         o#$$$$&&$$&&$$$$$$$$$$$$$$#%+;'..`
#                         .#$$$$$$%o+%$$$$$$$$$$$$$$%+i`
#                          ;#$$$$$$$$$$$$$$$$$$$$$$*ii`
#                           :$#$$$$$$$$$$$$$$$$$&*+;i;
#                            'o#$$$$$$$$$$$$$&%oi;;;i;....'
#                              ,&#$$$$$$$$%o+i;;;iii+;...,::
#                               `;%###$%oi;;;iiiiiiii;,:;;ii`
#                                `.;ii;;;;;;i;i;;;;;;iiiiiii`
#                              `.....',+ii+*%*iiiiiiiiiiiii;
#                             ;**%%,..;$*i%$$$%;iiiiiiiiiii;
#                             ;#$$$+..i##%&$$&$*;iiiiiiiiii;
#                             `&$&$*.';%**$$$$$$o;iiiiiiiiii'
#                              +$&$&,,ioi%$$$$$$$o;iiiiiiiii: `
#                              o$&$$+oooo$$$$$$$$$+;iiiiii;;:.''
#                             '%$&$$*+o+*$$$$$$$$$$o;;;:;;:,.'.,,'
#                           `,i*&$$$%+o+&$$$$$$&&%%*oo++;:,''.:;;;;,.
#                         `'::*%o%$$&++o$$$$&%******%%o+:::io*ooo**%%o;.`
#                       ';*i:;%*%**&$o+&$&%****%%%%%oi::;+*%%%%%%%%**%%%*+:
#                     ,+%%%;:i%*%%****o%*****%%%%%*i::;+*%%******%%%%***%%%+`
#                   :*%%***;:;*%%*%%*******%%*%%*i;,;+*%%*%%%%%%%%%%%%%%***%i
#                 `o%%****%;::*%*%%o*%%%%*o+o**i;:;i*%%*%%%%%%%%%%%%%%%%%%**%.
#                 +%**%%%%%i::o%%oio%**%%%%*i:;,;;*%%**%%%%%%%%%%%%%%%%%%%*%*;'
#

# Examples:
# moodle-docker help
# moodle-docker start 45
# moodle-docker start 42
# moodle-docker start 41
# moodle-docker start 311
# moodle-docker start 39
# moodle-docker update 41
# moodle-docker stop 41
# moodle-docker destroy 41
# moodle-docker behat 41 addtional

# TODO Flip arguments and support MWP eg moodle-docker 44mwp start | moodle-docker 44lms start

# VARS.
ORIGINAL_DIR=$(pwd)
SCRIPT_DIR_MOODLE_DOCKER="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# TODO compare against brew list --versions moodle-docker start upgrade if its higher than current
PLUGIN_VERSION="1.0.22"

MOODLE_LIST=$(cat $SCRIPT_DIR_MOODLE_DOCKER/moodle_VERSIONS.txt)
VERSIONS=$(echo "$MOODLE_LIST" | awk -F'|' '{ print $1 }')
ARG2_SELECTED_VERSION=""
VERSION_FOUND=0
ARG1_ACTION="$1"
ARG2_SELECTED_VERSION="$2"
# ----------------------------------------------------------------

source "$SCRIPT_DIR_MOODLE_DOCKER/scripts/helper.sh"

# Below is the alias (moodle-docker) to https://github.com/LdesignMedia/homebrew-moodle-docker/blob/main/install_moodle_docker.sh this is used for
# installing and workarround home directory issues.
log "Brew runner version:"
brew list --versions moodle-docker

log "${GREEN}Moodle docker $PLUGIN_VERSION by Ldesign Media"
log "Running in $SCRIPT_DIR_MOODLE_DOCKER"
log "${YELLOW}You can read the full documentation here: https://github.com/LdesignMedia/moodle-docker-brew"

if [ "$ARG1_ACTION" == "help" ]; then
  log "Usage: $0 command moodleversion [arg3 arg4 ...]"
  log "command: start | update | stop | destroy | info | behat | phpunit | upgrade | grunt"
  log "Example of moodleversion: 45, 44, 43, 42, 41, 40, 311, 310, 39"
  log "More arguments are optional for phpunit or behat"

  abort "-"
fi

if [ "$ARG1_ACTION" == "upgrade" ]; then
  cd "$SCRIPT_DIR_MOODLE_DOCKER" || abort "~/moodle-docker-brew is missing"
  log "${GREEN}Moodle upgrade brew package"

  # Check if the brew package itself has changed.
  brew update
  brew upgrade moodle-docker

  # Cleanup old  .gitmodules
  rm -f .gitmodules > /dev/null

  # Update the main repo.
  git pull
  git fetch origin
  git reset --hard origin/main
  git clean -fd

  # Update the submodule (git@github.com:moodlehq/moodle-docker.git).
  log "Updating moodlehq-docker"

  # If folder not exists clone the repository
  if [ ! -d "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" ]; then
    log "${GREEN}Install moodlehq-docker"
    git clone git@github.com:moodlehq/moodle-docker.git moodlehq-docker
  fi

  # Update the official docker suite from Moodle.
  cd "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" || abort "~/moodle-docker-brew/moodlehq-docker is missing"
  git pull
  git fetch origin
  git reset --hard origin/main
  git clean -fd

  # Back to the original directory.
  cd "$ORIGINAL_DIR" || exit

  exit 0
fi

# Validate we can run the script.
setup

# Check if at least two argument is provided
if [ "$#" -lt 2 ]; then
  abort "Usage: $0 command moodleversion [arg3 arg4 ...]"
fi

# Check if the provided version is in the list
for version in $VERSIONS; do
  if [ "$version" == "$ARG2_SELECTED_VERSION" ]; then
    VERSION_FOUND=1
    break
  fi
done

if [ ! $VERSION_FOUND -eq 1 ]; then
  abort "The provided version $ARG2_SELECTED_VERSION is not in the Moodle version list."
fi

# Get the corresponding download URL
download_url=$(echo "$MOODLE_LIST" | grep "^$ARG2_SELECTED_VERSION|" | awk -F'|' '{ print $2 }')

if [ -z "$download_url" ]; then
  abort "Invalid selection. Please try again."
fi

# Remove the first argument
shift
shift
ALL_REMAINING_ARGS="$@"

# Validate the first argument
case "$ARG1_ACTION" in
start | update | stop | destroy | info | behat | phpunit | grunt) ;;
*)
  abort "Error: Invalid first argument. Allowed values are: start, update, stop, destroy, behat, phpunit, upgrade, grunt."
  ;;
esac

# LOGGING ----------------------------------------------------------------
log "Argument remaining: $ALL_REMAINING_ARGS"
log "${GREEN}Selected Moodle version: $ARG2_SELECTED_VERSION"
# ----------------------------------------------------------------

# EXPORTS ----------------------------------------------------------------
export COMPOSE_PROJECT_NAME="moodle${ARG2_SELECTED_VERSION}"
export MOODLE_DOCKER_DB=mariadb
export MOODLE_DOCKER_DB_PORT="330${ARG2_SELECTED_VERSION}"
export MOODLE_DOCKER_SELENIUM_VNC_PORT="590${ARG2_SELECTED_VERSION}"
export MOODLE_DOCKER_WEB_PORT="80${ARG2_SELECTED_VERSION}"
export MOODLE_DOCKER_WWWROOT="${SCRIPT_DIR_MOODLE_DOCKER}/moodle/${ARG2_SELECTED_VERSION}"

# Set PHP for older versions
if [ "$ARG2_SELECTED_VERSION" == "39" ]; then
  export MOODLE_DOCKER_PHP_VERSION=7.4
  log "${GREEN}Running with the PHP version: 7.4 (See: https://docs.moodle.org/402/en/PHP)"
elif [ "$ARG2_SELECTED_VERSION" -ge "44" ]; then
  export MOODLE_DOCKER_PHP_VERSION=8.1
  log "${GREEN}Running with PHP version: 8.1"
else
  log "${GREEN}Running with PHP version: 8.0"
  export MOODLE_DOCKER_PHP_VERSION=8.0
fi

log "${YELLOW}DB port: $MOODLE_DOCKER_DB_PORT"
log "${YELLOW}VNC port: $MOODLE_DOCKER_SELENIUM_VNC_PORT Password: secret"
log "${YELLOW}Webserver port: $MOODLE_DOCKER_WEB_PORT"
log "${YELLOW}Directory: $MOODLE_DOCKER_WWWROOT"
log "${YELLOW}When running Available on: http://localhost:$MOODLE_DOCKER_WEB_PORT/"
log "${YELLOW}Login: username: admin password: test"
log "${YELLOW}Behat faildumps: http://localhost:$MOODLE_DOCKER_WEB_PORT/_/faildumps/"
log "${YELLOW}Mail catcher: http://localhost:$MOODLE_DOCKER_WEB_PORT/_/mail/"
log "${YELLOW}Acceptance testing INFO + Definitions: http://localhost:$MOODLE_DOCKER_WEB_PORT//admin/tool/behat/index.php"
log ""
log "${YELLOW}Behat tests: https://moodledev.io/general/development/tools/behat"
log "${YELLOW}How to write behat tests: https://moodledev.io/general/development/tools/behat/writing"
log "${YELLOW}Behat definitions: https://behat.org/en/latest/user_guide/context/definitions.html"
log ""
log "${YELLOW}How to write unit tests: https://docs.moodle.org/dev/Writing_PHPUnit_tests"

# ----------------------------------------------------------------

# START COMMAND
# ----------------------------------------------------------------
if [ "$ARG1_ACTION" == "start" ]; then

  # Download the zip file to the moodle directory and name it using the selected_version
  zip_file="$SCRIPT_DIR_MOODLE_DOCKER/moodle/${ARG2_SELECTED_VERSION}.zip"

  if [ ! -f "$zip_file" ]; then

    if command -v wget >/dev/null 2>&1; then
      wget -O "$zip_file" "$download_url"
    elif command -v curl >/dev/null 2>&1; then
      curl -o "$zip_file" -L "$download_url"
    else
      abort "Error: wget or curl is required to download the Moodle version."
    fi

    log "Moodle version $ARG2_SELECTED_VERSION downloaded to: $zip_file"
  else
    log "Already downloaded to: $zip_file"
  fi

  # Unzipping Moodle.
  if [ ! -f "$zip_file" ]; then
    abort "Failed to download  $download_url"
  fi

  if [ ! -d "$SCRIPT_DIR_MOODLE_DOCKER/moodle/${ARG2_SELECTED_VERSION}" ]; then
    rm -rf "$SCRIPT_DIR_MOODLE_DOCKER/moodle/moodle"
    unzip -q "$zip_file" -d "$SCRIPT_DIR_MOODLE_DOCKER/moodle/"
    mv "$SCRIPT_DIR_MOODLE_DOCKER/moodle/moodle" "$SCRIPT_DIR_MOODLE_DOCKER/moodle/${ARG2_SELECTED_VERSION}"

    log "${GREEN}Moodle directory available at ${SCRIPT_DIR_MOODLE_DOCKER}/moodle/${ARG2_SELECTED_VERSION}"
  else
    log "${GREEN}Moodle directory available at ${SCRIPT_DIR_MOODLE_DOCKER}/moodle/${ARG2_SELECTED_VERSION}"
  fi

  log "$COMPOSE_PROJECT_NAME"

  cp "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker/config.docker-template.php" "$MOODLE_DOCKER_WWWROOT/config.php"
  cd "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" || abort "moodlehq-docker is missing"

  # Make sure Moodle is installed.
  if [ ! -f "$MOODLE_DOCKER_WWWROOT/version.php" ]; then
    abort "Failed to install Moodle in ($MOODLE_DOCKER_WWWROOT)"
  fi

  if [ ! -f "$MOODLE_DOCKER_WWWROOT/installed" ]; then

    bin/moodle-docker-compose up -d

    # Wait for DB to come up (important for oracle/mssql)
    bin/moodle-docker-wait-for-db

    # Flag so we don't run this more than once.
    touch "$MOODLE_DOCKER_WWWROOT/installed"

    bin/moodle-docker-compose exec webserver php admin/cli/install_database.php --agree-license --fullname="$COMPOSE_PROJECT_NAME" \
      --shortname="$COMPOSE_PROJECT_NAME" --summary="Docker moodle site $COMPOSE_PROJECT_NAME" --adminpass="test" --adminemail="admin@example.com"

    log "Installing Moodle completed successfully"
    # Add moodle developer tools.

    # Initialize behat environment.
    log "Installing Moodle behat"
    bin/moodle-docker-compose exec webserver php admin/tool/behat/cli/init.php

    # Initialize phpunit environment.
    log "Installing Moodle phpunit"

    bin/moodle-docker-compose exec webserver php admin/tool/phpunit/cli/init.php
  else
    # Restart containers
    bin/moodle-docker-compose start
  fi

  log "${YELLOW}Available on: http://localhost:$MOODLE_DOCKER_WEB_PORT/"

# DESTROY COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "destroy" ]; then
  log "${MAGENTA}Destroying Moodle installation and docker containers."

  if confirm "Do you want to proceed?"; then

    # Shut down and destroy containers
    cd "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" || abort "moodlehq-docker is missing"

    bin/moodle-docker-compose down

    rm -rf "$MOODLE_DOCKER_WWWROOT"
    rm "$SCRIPT_DIR_MOODLE_DOCKER/../moodle/$ARG2_SELECTED_VERSION.zip" >/dev/null

  fi

# STOP COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "stop" ]; then

  log "${GREEN}stopping docker containers."
  cd "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" || abort "moodlehq-docker is missing"
  check_is_running

  # Shut down and destroy containers
  bin/moodle-docker-compose stop

# BEHAT COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "behat" ]; then
  log "${GREEN}bin/moodle-docker-compose exec -i -u www-data webserver bash -ic php admin/tool/behat/cli/run.php $ALL_REMAINING_ARGS"

  cd "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" || abort "moodlehq-docker is missing"
  check_is_running

  bin/moodle-docker-compose exec -i -u www-data webserver bash -ic "php admin/tool/behat/cli/run.php $ALL_REMAINING_ARGS"

# PHPUNIT COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "phpunit" ]; then
  log "${GREEN}bin/moodle-docker-compose exec webserver vendor/bin/phpunit $ALL_REMAINING_ARGS"

  cd "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" || abort "moodlehq-docker is missing"
  check_is_running

  bin/moodle-docker-compose exec webserver vendor/bin/phpunit "$ALL_REMAINING_ARGS"

# GRUNT COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "grunt" ]; then
  # Usage: moodle-docker grunt {version} [watch]
  cd "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" || abort "moodlehq-docker is missing"
  check_is_running

  GRUNT_SUBCOMMAND="$3"
  if [ -z "$GRUNT_SUBCOMMAND" ]; then
    GRUNT_SUBCOMMAND="watch"
  fi

  if [ "$GRUNT_SUBCOMMAND" != "watch" ]; then
    abort "Unknown grunt subcommand: $GRUNT_SUBCOMMAND (supported: watch)"
  fi

  log "${GREEN}Starting grunt watch inside container (this will keep the session open)."

  if [ "${MOODLE_DOCKER_GRUNT_METHOD:-dockerexec}" = "compose" ]; then
    # Run grunt watch with NVM bootstrap inside the container for www-data.
    bin/moodle-docker-compose exec -it -u www-data webserver bash -lc '
    set -uo pipefail
    export NVM_DIR="/var/www/html/.nvm"
    mkdir -p "$NVM_DIR"
    if [ ! -s "$NVM_DIR/nvm.sh" ]; then
      if command -v curl >/dev/null 2>&1; then
        curl -fsSL https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
      elif command -v wget >/dev/null 2>&1; then
        wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.3/install.sh | bash
      else
        echo "curl or wget required to install nvm" >&2
        exit 1
      fi
    fi
    # shellcheck disable=SC1090
    . "$NVM_DIR/nvm.sh"

    cd /var/www/html
    NODEVER="20"
    if [ -f package.json ]; then
      echo "Checking package.json for Node version requirements..."
      NODE_REQ=$(grep -oE "\"node\"[[:space:]]*:[[:space:]]*\"[^\"]*\"" package.json 2>/dev/null | head -1)
      echo "Found Node requirement: $NODE_REQ"

      if echo "$NODE_REQ" | grep -qE "22\.|>=22" 2>/dev/null; then
        NODEVER="22"
      elif echo "$NODE_REQ" | grep -qE "20\.|>=20" 2>/dev/null; then
        NODEVER="20"
      elif echo "$NODE_REQ" | grep -qE "18\.|>=18" 2>/dev/null; then
        NODEVER="18"
      elif echo "$NODE_REQ" | grep -qE "16\.|>=16" 2>/dev/null; then
        NODEVER="16"
      fi
    fi

    echo "Using Node $NODEVER"
    nvm install "$NODEVER"
    nvm use "$NODEVER"
    node -v
    npm -v

    # Ensure grunt-cli and dependencies
    npm install -g grunt-cli
    if [ -f package-lock.json ]; then
      npm ci
    else
      npm install
    fi

    echo "Starting grunt watch (Ctrl+C to stop)"
    echo "========================================="

    # Trap SIGINT (Ctrl+C) to ensure clean exit
    trap "echo Stopping grunt watch...; exit 0" INT TERM

    # Run grunt watch with unbuffered output
    grunt watch
  '
  else
    # Fallback/default: use docker exec directly for reliable streaming
    container_name="${COMPOSE_PROJECT_NAME}-webserver-1"
    log "Attaching to container: $container_name"
    log "${YELLOW}Installing dependencies if needed (this may take a moment on first run)..."

    # Ensure bash and curl/wget are present for nvm install (best-effort; ignore failures)
    docker exec -u root "$container_name" sh -c 'command -v bash >/dev/null 2>&1 || (apt-get update && apt-get install -y bash >/dev/null 2>&1 || apk add --no-cache bash >/dev/null 2>&1 || dnf -y install bash >/dev/null 2>&1 || yum -y install bash >/dev/null 2>&1 || true)' 2>/dev/null
    docker exec -u root "$container_name" sh -c 'command -v curl >/dev/null 2>&1 || command -v wget >/dev/null 2>&1 || (apt-get update && apt-get install -y curl >/dev/null 2>&1 || apk add --no-cache curl >/dev/null 2>&1 || dnf -y install curl >/dev/null 2>&1 || yum -y install curl >/dev/null 2>&1 || true)' 2>/dev/null

    # Copy the runner script into the container then execute with a TTY for live output
    docker cp "$SCRIPT_DIR_MOODLE_DOCKER/scripts/grunt_watch_inside_container.sh" "$container_name:/tmp/grunt_watch_inside_container.sh"

    # Make script executable
    docker exec "$container_name" chmod +x /tmp/grunt_watch_inside_container.sh

    # Run the script with proper TTY allocation
    docker exec -it -u www-data "$container_name" bash -lc '/tmp/grunt_watch_inside_container.sh'
  fi

# UPDATE COMMAND
# ----------------------------------------------------------------
elif [ "$ARG1_ACTION" == "update" ]; then

  log "${GREEN}Updating container behat + unit tests init again."
  cd "$SCRIPT_DIR_MOODLE_DOCKER/moodlehq-docker" || abort "moodlehq-docker is missing"
  check_is_running

  # Initialize behat environment.
  log "Installing Moodle behat"
  bin/moodle-docker-compose exec webserver php admin/tool/behat/cli/init.php

  # Initialize phpunit environment.
  log "Installing Moodle phpunit"
  bin/moodle-docker-compose exec webserver php admin/tool/phpunit/cli/init.php

else
  log "Unknown command $ARG1_ACTION"
fi
